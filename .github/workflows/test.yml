permissions:
  contents: read

# runs on push to the main branch, and PRs
on:
  push:
    branches: [main]
  pull_request:

name: "test"
jobs:

  # 1.
  required:
    name: "ubuntu / ${{ matrix.toolchain }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        toolchain: [stable]
        # toolchain: [stable, beta]
    steps:
      - name: "checkout"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "Install ${{ matrix.toolchain }}"
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}

      - name: "Install libraries via APT"
        run: |
          sudo apt update
          # for alsa-sys, gilrs:
          sudo apt install -y libasound2-dev libudev-dev
          # for ffmpeg:
          sudo apt install -y clang pkg-config libavcodec-dev libavdevice-dev \
            libavfilter-dev libavformat-dev libavutil-dev
          # for sdl2:
          sudo apt install -y libsdl2-dev libsdl2-gfx-dev libsdl2-image-dev \
            libsdl2-mixer-dev libsdl2-ttf-dev

      - name: "cargo generate-lockfile"
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile

      - name: "install rust-script"
        run: cargo install rust-script;

      # https://twitter.com/jonhoo/status/1571290371124260865

      - name: "./utils/check.rs --install-arches --install-nightly"
        run: ./utils/check.rs --install-arches --install-nightly

      - name: "./utils/check.rs --tests"
        run: ./utils/check.rs --tests

  # 2.
  minimal:
    name: "ubuntu / stable / minimal-versions"
    runs-on: ubuntu-latest
    steps:
      - name: "checkout"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "Install stable"
        uses: dtolnay/rust-toolchain@stable

      - name: "Install nightly for -Zminimal-versions"
        uses: dtolnay/rust-toolchain@nightly

      - name: "rustup default stable"
        run: rustup default stable

      - name: "cargo update -Zminimal-versions"
        run: cargo +nightly update -Zminimal-versions

      - name: "cargo test --locked -F all,std,unsafe,__dbg"
        run: cargo test --locked -F all,std,unsafe,__dbg

      - name: "cargo test --locked -F all,safe,__dbg"
        run: cargo test --locked -F all,safe,__dbg

  # 3.
  os-check:
    name: "${{ matrix.os }} / stable"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: "checkout"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "Install stable"
        uses: dtolnay/rust-toolchain@stable

      - name: "cargo generate-lockfile"
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile

      - name: "cargo test --locked -F all,std,unsafe,__dbg"
        run: cargo test --locked -F all,std,unsafe,__dbg -v

      - name: "cargo test --locked -F all,safe,__dbg"
        run: cargo test --locked -F all,safe,__dbg -v

  # 4.
  # coverage:
  #   runs-on: ubuntu-latest
  #   name: ubuntu / stable / coverage
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         submodules: true
  #     - name: Install stable
  #       uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: llvm-tools-preview
  #     - name: cargo install cargo-llvm-cov
  #       uses: taiki-e/install-action@cargo-llvm-cov
  #     - name: cargo generate-lockfile
  #       if: hashFiles('Cargo.lock') == ''
  #       run: cargo generate-lockfile
  #     - name: cargo llvm-cov
  #       run: cargo llvm-cov --locked --lcov --output-path lcov.info
  #     - name: Upload to codecov.io
  #       uses: codecov/codecov-action@v3
  #       with:
  #         fail_ci_if_error: true
