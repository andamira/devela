permissions:
  contents: read

# runs on push to the main branch, and PRs
on:
  push:
    branches: [main]
  pull_request:
name: check

jobs:
  # 1. format
  fmt:
    name: "stable / fmt"
    runs-on: ubuntu-latest
    steps:
      - name: "checkout"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "Install stable"
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: "./utils/rustfmt check all exclude"
        run: ./utils/rustfmt check all exclude

  # 2. clippy lints
  clippy:
    name: "${{ matrix.toolchain }} / clippy"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        toolchain: [stable]
        # toolchain: [stable, beta]
    steps:
      - name: "checkout"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "Install ${{ matrix.toolchain }}"
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      - name: "cargo clippy -F all,std,unsafe"
        run: cargo clippy -F all,std,unsafe

      - name: "cargo clippy -F all,safe"
        run: cargo clippy -F all,safe

  # 3. documentation
  doc:
    name: "nightly docs"
    runs-on: ubuntu-latest
    steps:
      - name: "checkout"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "Install libraries via APT"
        run: |
          sudo apt update
          # for alsa-sys, gilrs:
          sudo apt install -y libasound2-dev libudev-dev
          # for fltk:
          sudo apt install -y libpango1.0-dev libxft-dev # libxext-dev libxft-dev \
            # libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libpng-dev \
            # libgl1-mesa-dev libglu1-mesa-dev
          # for sdl2:
          sudo apt install -y libsdl2-dev libsdl2-gfx-dev libsdl2-image-dev \
            libsdl2-mixer-dev libsdl2-ttf-dev

      - name: "Install nightly"
        uses: dtolnay/rust-toolchain@nightly

      - name: "cargo +nightly doc -F _docsrs"
        run: cargo doc -F _docsrs
        env:
          RUSTDOCFLAGS: --cfg _docsrs

  # 4. minimum supported Rust version
  msrv:
    name: "ubuntu / ${{ matrix.msrv }}"
    runs-on: ubuntu-latest
    # we use a matrix here just because env can't be used in job names
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      matrix:
        msrv: [1.84.1] # sync with ../../{README.md, Cargo.toml}
    steps:
      - name: "checkout"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "Install ${{ matrix.msrv }}"
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.msrv }}

      - name: "cargo +${{ matrix.msrv }} check -F all,std,unsafe"
        run: cargo check -F all,std,unsafe

      - name: "cargo +${{ matrix.msrv }} check -F all,safe"
        run: cargo check -F all,safe
