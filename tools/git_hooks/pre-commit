#!/bin/bash
#
# Runs rustfmt and clippy before a git commit.
#
# To configure git locally to use these hooks:
# $ git config core.hooksPath "./tools/git_hooks"

RUSTFMT="rustfmt +stable --edition 2021" # for specific files
CLIPPY="cargo +stable clippy" # for the whole project
# CLIPPY="cargo +nightly clippy" # more buggy

# CHANGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR) # only staged
CHANGED_FILES=$(git diff --name-only --diff-filter=ACMR) # staged or not

EXCLUDE_FILES=(
	"examples/cargo-script.rs" # uses experimental cargo syntax
)

# Filter out excluded files and keep only Rust files
RS_FILES=()
for file in $CHANGED_FILES; do
    if [[ " ${EXCLUDE_FILES[@]} " =~ " ${file} " ]] || [[ ! $file =~ \.rs$ ]]; then
        # Skip excluded files and non-Rust files
        continue
    fi
    # Add the remaining files to the list
    RS_FILES+=("$file")
done
if [ ${#RS_FILES[@]} -eq 0 ]; then
    echo "No applicable Rust files changed."
    exit 0
fi

$RUSTFMT --version &>/dev/null || { echo "rustfmt not available"; exit 1; }
formatting_errors=0
for file in "${RS_FILES[@]}"; do
    # echo "Checking format of $file"
    $RUSTFMT --check "$file" || formatting_errors=$((formatting_errors + 1))
done
printf "[pre_commit] $RUSTFMT → "
if [ $formatting_errors != 0 ]; then
	if [ $formatting_errors == 1 ]; then
		printf "\033[0;31merrors \033[0min $formatting_errors file\n"
	else
		printf "\033[0;31merrors \033[0min $formatting_errors files\n"
	fi
	exit $result
else
    printf "\033[0;32mOK\033[0m\n"
fi

$CLIPPY --version &>/dev/null || { echo "clippy not available"; exit 1; }
$CLIPPY -- --deny warnings
result=$?
printf "[pre_commit] $CLIPPY → "
if [ $result != 0 ]; then
    printf "\033[0;31merror\033[0m\n"
else
    printf "\033[0;32mOK\033[0m\n"
fi
