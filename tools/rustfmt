#!/bin/bash
#
# Runs rustfmt checks
#
# # Usage examples
#
# To check the changed Rust files excluding files from $EXCLUDE_FILES:
# $ ./tools/rustfmt check changed exclude
#
# To check all the Rust files without excluding any, and stopping on first error:
# $ ./tools/rustfmt check all no-exclude stop
#
# To format the changed Rust files without excluding any:
# $ ./tools/rustfmt format changed


#* CONFIGURATION *#

# `rustfmt` command (minus --check)
RUSTFMT="rustfmt +stable --edition 2024"

# directories to include in the search for "all" Rust files, relative to $CRATE_ROOT
INCLUDE_DIRS=("examples" "src")

# initialize default argument values
ARG_MODE="check" # Default rustfmt mode (check|format)
ARG_FILES="changed" # Default file selection (all|changed)
ARG_USE_EXCLUSION="no-exclude" # Default to using the exclusion list
ARG_STOP_ON_ERROR=false # Do not stop on first error by default

# paths
SCRIPT_DIR=$(dirname "$0")
CRATE_ROOT=$(readlink -f "$SCRIPT_DIR/..")
EXCLUDE_FILES="tools/rustfmt_excluded_files"


#* PARSE *#

# parse arguments
while [[ "$#" -gt 0 ]]; do
    case "$1" in
        check|format)
            ARG_MODE="$1"
			echo "Will \"$ARG_MODE\" files."
            ;;

        all)
            ARG_FILES="$1"
			echo "Will find \"$ARG_FILES\" files."
            ;;
        changed|modified)
            ARG_FILES="changed"
			echo "Will find \"$ARG_FILES\" files."
            ;;

        exclude)
            ARG_USE_EXCLUSION="exclude"
			echo "Will exclude files listed in \"$EXCLUDE_FILES\"."
            ;;
        stop)
            ARG_STOP_ON_ERROR=true
            ;;
        *)
            echo "Unknown argument: $1"
            echo "Usage: $0 [all|changed] [exclude|no-exclude] [stop]"
            exit 1
            ;;
    esac
    shift
done

# find the rust files
FILE_LIST=()
if [ "$ARG_FILES" == "all" ]; then
	for dir in "${INCLUDE_DIRS[@]}"; do
		# echo "> find $CRATE_ROOT/$dir -type f -name \"*.rs\""

        # Find all .rs files in the directory and append them to FILE_LIST
        while IFS= read -r -d $'\0' file; do
            FILE_LIST+=("$file")
        done < <(find "$CRATE_ROOT/$dir" -type f -name "*.rs" -print0)
    done
elif [ "$ARG_FILES" == "changed" ]; then
    # Use existing logic to get modified files
    mapfile -t TMP_FILE_LIST < <(git diff --name-only --diff-filter=ACMR) # either staged or not
    # Filter TMP_FILE_LIST by INCLUDE_DIRS, considering paths are relative to $CRATE_ROOT
    for file in "${TMP_FILE_LIST[@]}"; do
        for dir in "${INCLUDE_DIRS[@]}"; do
            if [[ $file == $dir/* ]]; then
                FILE_LIST+=("$CRATE_ROOT/$file")
                break # Stop checking other dirs once matched
            fi
        done
    done
else
    echo "Invalid file selection specified. Use 'all' or 'changed'."
    exit 1
fi
# echo "> FILE_LIST: ${FILE_LIST[@]}"; # DEBUG

# parse the file with the list of excluded files
EXCLUDE_FILES_FULL_PATH="$CRATE_ROOT/$EXCLUDE_FILES"
if [[ "$ARG_USE_EXCLUSION" == "exclude" ]]; then
    if [ ! -f "$EXCLUDE_FILES_FULL_PATH" ]; then
        echo "File not found: \"$EXCLUDE_FILES\""
        exit 1
    else
        mapfile -t EXCLUDED_FILES < <(grep -vE "^\s*(#|\$)" "$EXCLUDE_FILES_FULL_PATH")
    fi
fi
echo "> EXCLUDED_FILES: ${EXCLUDED_FILES[@]}"; # DEBUG


#* RUN *#

echo -e "Running rustfmt. . .\n"

RUSTFMT_FILES=()
for file in "${FILE_LIST[@]}"; do
    # Convert to relative path for matching
    relative_path=$(realpath --relative-to="$CRATE_ROOT" "$file")

    # Check exclusion and Rust file extension
    if [ "$ARG_USE_EXCLUSION" == "exclude" ] && { [[ " ${EXCLUDED_FILES[*]} " =~ " ${relative_path} " ]] || [[ ! $file =~ \.rs$ ]]; }; then
        # echo "> EXCLUDED FILE: $relative_path" # DEBUG
        continue # skip excluded files and non-Rust files
    elif [ "$ARG_USE_EXCLUSION" != "exclude" ] && [[ ! $file =~ \.rs$ ]]; then
        # echo "> NOT RUST FILE: $relative_path" # DEBUG
        continue # skip non-Rust files
    fi
    RUSTFMT_FILES+=("$file") # add the remaining files
done

if [ ${#RUSTFMT_FILES[@]} -eq 0 ]; then
    echo "No applicable Rust files found."
    exit 0
fi

$RUSTFMT --version &>/dev/null || { echo "rustfmt not available"; exit 1; }

formatting_errors=0
for file in "${RUSTFMT_FILES[@]}"; do
	if [[ "$ARG_MODE" == "check" ]]; then
		# echo "$RUSTFMT --check \"$file\"" # DEBUG
		if ! $RUSTFMT --check "$file"; then
			formatting_errors=$((formatting_errors + 1))
			if [ "$ARG_STOP_ON_ERROR" = true ]; then
				echo "Stopping on first error as requested."
				exit 1
			fi
		fi
	else
		# echo "$RUSTFMT \"$file\"" # DEBUG
		$RUSTFMT "$file"
	fi
done

printf "[pre_commit] $RUSTFMT â†’ "
if [ $formatting_errors != 0 ]; then
    if [ $formatting_errors == 1 ]; then
        printf "\033[0;31merrors \033[0min $formatting_errors file\n"
    else
        printf "\033[0;31merrors \033[0min $formatting_errors files\n"
    fi
    exit $formatting_errors
else
    printf "\033[0;32mOK\033[0m\n"
fi
echo
