[workspace]

members = [".", "macros", "depend"]


[package]

name = "devela"
description = "A highly integrated layer for Rust development"
version = "0.19.0-wip"
edition = "2021"
rust-version = "1.74.1" # sync with readme & .github/*/check.yml
authors = ["Jos√© Luis Cruz <joseluis@andamira.net>"]
repository = "https://github.com/andamira/devela"
documentation = "https://docs.rs/devela"
license = "MIT OR Apache-2.0"
include = [
	"/Cargo.toml",
	"/src/**/*.rs", "/src/**/*.md",
	"/README.md", "/DERIVED.md", "/LICENSE-*",
	"res/*.html",
]
categories = ["development-tools", "rust-patterns", "no-std::no-alloc"]
keywords = ["dev", "helper", "helpers", "extension", "extensions"]
publish = true


# ------------------------------------------------------------------------------
# Features are grouped in 6 (mostly) independent categories:
# - Environment
# - Module
# - Safety
# - Nightly
# - Dependency

[features]

# default = []


#* environment features *#

std = [ # disables `no_std` compatibility and enables `std` functionality
	"alloc",
	"dep?/std",
	"atomic?/std", "bytemuck?/extern_crate_std"
]
alloc = [ # enables `alloc` functionality
	"dep?/alloc",
	"bytemuck?/extern_crate_alloc",
]
no_std = [ # enables functionality incompatible with `std`
	"dep?/libm",
]


#* module features *#

full = [ # enables all the modules
	"color", "data", "math", "mem", "meta",
	"path", "result", "task", "text", "time",
	]
	full_unsafe = ["full", "unsafe"]
fullest = ["full"] # enables `full` recursively (unused)

# individual modules (10)
# (modules enable their own dependencies if the `dep` feature is enabled)
color = []
data = ["dep?/bytemuck", "dep?/hashbrown"]
math = []
mem = ["dep?/bytemuck"]
meta = []
path = []
result = []
task = ["dep?/atomic", "dep?/portable-atomic", "bytemuck?/zeroable_atomics"]
text = ["dep?/const-str", "dep?/unicode-segmentation", "dep?/unicode-width"]
time = []

# individual modules with unsafe enabled (10):
color_unsafe = ["color", "unsafe_color"]
data_unsafe = ["data", "unsafe_data"]
math_unsafe = ["math", "unsafe_math"]
mem_unsafe = ["mem", "unsafe_mem"]
meta_unsafe = ["meta", "unsafe_meta"]
path_unsafe = ["path", "unsafe_path"]
result_unsafe = ["result", "unsafe_result"]
task_unsafe = ["task", "unsafe_task"]
text_unsafe = ["text", "unsafe_text"]
time_unsafe = ["time", "unsafe_time"]


#* safety features *#

unsafe = [ # enables unsafe features in this crate (10)
	"unsafe_color", "unsafe_data",  "unsafe_math","unsafe_mem", "unsafe_meta",
	"unsafe_path", "unsafe_result", "unsafe_task", "unsafe_text", "unsafe_time",
	]
	unsafe_color = [] # (unused)
	unsafe_data = [] # (unused)
	unsafe_math = [] # enables unsafe constructors, bytemuck's traits, MaybeUninit
	unsafe_mem = [] # enables `as_bytes*` functions and bytemuck's traits
	unsafe_meta = [] # (unused)
	unsafe_path = [] # (unused)
	unsafe_result = [] # (unused)
	unsafe_task = [] # enables a coroutines implementation.
	unsafe_text = [] # enables unsafe use in `text`
	unsafe_time = [] # (unused)
safe = [] # forbids `unsafe` in this crate
safest = ["safe"] # forbids `unsafe` recursively (unused)
unsafest = ["unsafe"] # enables `unsafe` recursively (unused)


#* nightly features *#

nightly = [ # enables nightly features
]
docsrs = ["std", "full", "unsafe", "nightly", "dep", "libm"]

#* dependency features *#

dep = ["dep:dep"] # module features enables their dependencies as defined.

atomic = ["dep:atomic"]
#az = ["dep:az"]
bytemuck = ["dep:bytemuck"]
const-str = ["dep:const-str"]
libm = ["dep:libm"]
hashbrown = ["dep:hashbrown"]
portable-atomic = ["dep:portable-atomic"]
unicode-segmentation = ["dep:unicode-segmentation"]
unicode-width = ["dep:unicode-width"]


# ------------------------------------------------------------------------------

[dependencies]
devela_macros = { version  = "0.7.1" }
#devela_macros = { path = "./macros" }
paste_crate = { package = "paste", version = "1.0.14", default-features = false }

# There are two options for enabling optional dependencies:
#
# option A) When the `depend` feature is enabled each optional dependency will
# be automatically enabled by some individual module feature, as defined above:
dep = { package = "devela_depend", version = "0.2.0", optional = true }
#dep = { package = "devela_depend", path = "./depend", optional = true }
#
# option B) Otherwise optional features can be manually enabled:
#az = { version = "1.2.1", default-features = false, optional = true }
const-str = { version = "0.5.6", default-features = false, optional = true }
libm = { version = "0.2.8", default-features = false, optional = true }
unicode-segmentation = { version = "1.10.1", default-features = false, optional = true }
unicode-width = { version = "0.1.11", default-features = false, optional = true }
[dependencies.atomic]
version = "0.6.0"
default-features = false
optional = true
features = ["fallback"]
[dependencies.bytemuck]
version = "1.14.0"
default-features = false
optional = true
features = ["align_offset", "min_const_generics", "must_cast", "zeroable_maybe_uninit"]
[dependencies.hashbrown]
version = "0.14.1"
default-features = false
optional = true
features = ["ahash", "inline-more"]
[dependencies.portable-atomic]
version = "1.4.3"
default-features = false
optional = true
features = ["fallback", "float"]

[dev-dependencies]

devela = { path = ".", features = ["full"] }


# ------------------------------------------------------------------------------

[package.metadata.docs.rs]
no-default-features = true
features = ["docsrs"]
rustdoc-args = [ "--html-in-header", "./res/rustdoc-header.html" ]

[badges]
maintenance = { status = "experimental" }
