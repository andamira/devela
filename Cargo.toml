# https://doc.rust-lang.org/cargo/reference/manifest.html
# ==============================================================================

[workspace]
members = [".", "macros"]

[lib]
path = "./src/Lib.rs"
bench = false

[package]
name = "devela"
description = "A cohesive Rust development layer."
version = "0.21.0-wip"
edition = "2021"
rust-version = "1.77.1" # sync with readme & .github/*/check.yml
authors = ["Jos√© Luis Cruz <joseluis@andamira.net>"]
repository = "https://github.com/andamira/devela"
documentation = "https://docs.rs/devela"
license = "MIT OR Apache-2.0"
include = [
	"/src/**/*.rs", "/src/**/*.md",
	"/Cargo.toml",
	"/DOCS/*",
	"/examples/bitfield.rs", "/examples/enumset.rs",
	"/examples/cargo_script.rs", "/examples/coro_run.rs",
	"/examples/cli_prompt.rs",
]
categories = ["development-tools", "rust-patterns", "no-std::no-alloc"]
keywords = ["dev", "helper", "library", "std", "extension"]
publish = true


[features] # 170
# ==============================================================================
# Features are grouped in the following categories:
# - Miscellaneous
# - Environment
# - Module
# - Safety
# - Nightly
# - Capability
# - Dependency
#
# Sintax:
# - ["name"]: Normal public-facing features starting with a letter.
# - ["_name"]: Capability features can be publicly selected.
# - ["_-name-_"]: Private, automatic features for reflexion.
#

#* miscellaneous features *#
# ------------------------------------------------------------------------------

# default = []

__dbg = [] # for debugging purposes, shows enabled features
__excluded = [] # allows excluding examples from being tested


#* environment features *#
# ------------------------------------------------------------------------------

alloc = [ # enables `alloc` functionality
	"bytemuck/extern_crate_alloc",
	"memchr?/alloc", "rand_core?/alloc"
]
std = [ # disables `no_std` compatibility and enables `std` functionality
	"alloc",
	"atomic?/std", "bytemuck/extern_crate_std", "log?/std", "memchr?/std", "rand_core?/std",
	"wide?/std",
]
no_std = [ # enables functionality incompatible with or substitute of `std`
]


#* module features trees *#
# ------------------------------------------------------------------------------

all = [ # enables all the modules and submodules
	"code", "data", "exec", "lex", "mem", "num", "rend", "sys", "time", "ui"
	]
code = []
data = [
	"data_bit", "data_collections"
	]
	data_bit = ["_-data-_"] # BitOps, Biting, bitfield!.
	data_collections = ["_-data-_"] # ...
exec = ["bytemuck/zeroable_atomics"]
lex = ["_non_specific_u8", "_non_specific_u16"]
mem = [
	"mem_bit",
	]
	mem_bit = ["_-mem-_"]
num = [
	"num_float", "num_geom", "num_int", "num_niche_range"
	]
	num_float = ["_-num-_"] # Float, ExtFloat.
	num_geom = ["_-num-_"] # geometric types and operations.
	num_int = ["_-num-_"] # Frac, Int, NumInt, NumRefInt.
	num_niche_range = ["_-num-_"] # Range* and NonRange* niche types.
rend = [
	"rend_audio", "rend_color", "rend_image"
	]
	rend_audio = ["_-rend-_"]
	rend_color = ["_-rend-_"]
	rend_image = ["_-rend-_"]
sys = []
time = []
ui = [
	 "ui_service",
	]
	ui_service = ["_-ui-_", "data_bit"]
		ui_term = ["ui_service", "unicode-width", "unicode-segmentation"]
		# ui_gfx = ["ui_service"]
		# ui_web = ["ui_service"]

# (private reflexion)
# auto-enabled by module sub-features
_-data-_ = []
_-mem-_ = []
_-num-_ = []
_-rend-_ = []
_-ui-_ = []


#* safety features trees *#
# ------------------------------------------------------------------------------

# To use unsafe functionality:
# 1. enable the desired `unsafe` feature.
# 2. don't enable the `safe` feature for that module.

safe = [ # forbids `unsafe` (and overrides unsafe features)
	"safe_code", "safe_data", "safe_exec", "safe_lex", "safe_mem",
	"safe_num", "safe_rend", "safe_sys", "safe_time", "safe_ui",
] # in specific modules:
	safe_code = []
	safe_data = []
	safe_exec = []
	safe_lex = []
	safe_mem = []
	safe_num = []
	safe_rend = []
	safe_sys = []
	safe_time = []
	safe_ui = ["safe_ui_term"]
		safe_ui_term = []
		# safe_ui_gfx = []

unsafe = [ # enables `unsafe` (as long as it isn't forbidden in the module)
	"unsafe_array", "unsafe_async", "unsafe_const", "unsafe_dyn",
	"unsafe_niche", "unsafe_ptr", "unsafe_slice", "unsafe_str",
	"unsafe_thread",
] # for specific purposes:
	unsafe_array = [] # faster array initialization, UninitArray.
	unsafe_async = [] # task_waker_noop, CoroRun,
	unsafe_const = [] # extra const methods.
	unsafe_dyn = [] # DSTs in the stack, no_std Error dyn impls.
	unsafe_niche = [] # unchecked niche constructors.
	unsafe_ptr = [] # pop methods without Clone.
	unsafe_slice = [] # extra slice methods, avoid bound checks.
	unsafe_str = [] # unchecked utf-8 char and &str conversions.
	unsafe_thread = [] # Logging::set_logger_racy.


#* nightly features tree *#
# ------------------------------------------------------------------------------

nightly = [
	"nightly_coro", "nightly_doc", "nightly_simd",
] # enables all the following features:
	nightly_coro= ["_-nightly-_"] # coroutines, coroutine_trait, iter_from_coroutine
	nightly_doc = ["_-nightly-_"] # doc_cfg
	nightly_simd = ["_-nightly-_"] # portable_simd

# (private reflexion)
# auto-enabled by nightly sub-features
_-nightly-_ = []


#* capability features *#
# ------------------------------------------------------------------------------
# They all start with a single underscore.
#
# Enabling extra capabilites can worsen compilation times.
# Some relative compilation times are provided as a guide.
#

_default = [ # default capabilities
]
_min_docs = [ # the minimum capabilities to document all methods
	"_float_f32", "_int_u8",
	"_bit_u8",
	"_non_specific_u8", "_non_range_u8", "_range_u8",
]
_max = [ # the maximum capabilities
	"_num_all",
	"_bit_all",
	"_niche_all",
	"_tuple_arity_127",
]

# The most complete versions of the documentation:
_docsrs = ["nightly", "_docsrs_stable"]
_docsrs_max = ["_docsrs", "_max"]
_docsrs_stable = ["all", "std", "unsafe", "dep_all", "_min_docs"]

# Specific numeric implementations for `Int`, `Float`, `Frac`,
# the respective traits, and for `Point`, `Angle`, `Vector`.
_num_all = ["_int_all", "_float_all"]
	_float_all = ["_float_f32", "_float_f64"]
		_float_f32 = ["_-num_any-_", "_-float_any-_"]
		_float_f64 = ["_-num_any-_", "_-float_any-_"]
	_int_all = ["_int_all_i", "_int_all_u"]
		_int_all_i = ["_int_i8", "_int_i16", "_int_i32", "_int_i64", "_int_i128", "_int_isize"]
			_int_i8 = ["_-int_iany-_"]
			_int_i16 = ["_-int_iany-_"]
			_int_i32 = ["_-int_iany-_"]
			_int_i64 = ["_-int_iany-_"]
			_int_i128 = ["_-int_iany-_"]
			_int_isize = ["_-int_iany-_"]
		_int_all_u = ["_int_u8", "_int_u16", "_int_u32", "_int_u64", "_int_u128", "_int_usize"]
			_int_u8 = ["_-int_uany-_"]
			_int_u16 = ["_-int_uany-_"]
			_int_u32 = ["_-int_uany-_"]
			_int_u64 = ["_-int_uany-_"]
			_int_u128 = ["_-int_uany-_"]
			_int_usize = ["_-int_uany-_"]
# (private reflexion)
_-num_any-_ = []
	_-float_any-_ = ["_-num_any-_"]
	_-int_any-_ = ["_-num_any-_"]
		_-int_iany-_ = ["_-int_any-_"]
		_-int_uany-_ = ["_-int_any-_"]

# Specific bitwise implementations for `Bitwise`, `bitfield`, `enumset`.
_bit_all = [
	"_bit_i8", "_bit_i16", "_bit_i32", "_bit_i64", "_bit_i128", "_bit_isize",
	"_bit_u8", "_bit_u16", "_bit_u32", "_bit_u64", "_bit_u128", "_bit_usize"
	]
	_bit_i8 = ["_-bit_any-_"]
	_bit_i16 = ["_-bit_any-_"]
	_bit_i32 = ["_-bit_any-_"]
	_bit_i64 = ["_-bit_any-_"]
	_bit_i128 = ["_-bit_any-_"]
	_bit_isize = ["_-bit_any-_"]
	_bit_u8 = ["_-bit_any-_"]
	_bit_u16 = ["_-bit_any-_"]
	_bit_u32 = ["_-bit_any-_"]
	_bit_u64 = ["_-bit_any-_"]
	_bit_u128 = ["_-bit_any-_"]
	_bit_usize = ["_-bit_any-_"]
# (private reflexion)
_-bit_any-_ = []

# Specific niche implementations for `NonSpecific*`, `NonEdge*`, `NonRange*`, `Range*`.
_niche_all = [
	"_non_specific_all", "_non_range_all", "_range_all",
	]
	_non_specific_all = [
		"_non_specific_i8", "_non_specific_i16", "_non_specific_i32",
		"_non_specific_i64", "_non_specific_i128", "_non_specific_isize",
		"_non_specific_u8", "_non_specific_u16", "_non_specific_u32",
		"_non_specific_u64", "_non_specific_u128", "_non_specific_usize",
		]
		_non_specific_i8 = ["_-non_specific_any-_"]
		_non_specific_u8 = ["_-non_specific_any-_"]
		_non_specific_i16 = ["_-non_specific_any-_"]
		_non_specific_u16 = ["_-non_specific_any-_"]
		_non_specific_i32 = ["_-non_specific_any-_"]
		_non_specific_u32 = ["_-non_specific_any-_"]
		_non_specific_i64 = ["_-non_specific_any-_"]
		_non_specific_u64 = ["_-non_specific_any-_"]
		_non_specific_i128 = ["_-non_specific_any-_"]
		_non_specific_u128 = ["_-non_specific_any-_"]
		_non_specific_isize = ["_-non_specific_any-_"]
		_non_specific_usize = ["_-non_specific_any-_"]
	_non_range_all = [
		"_non_range_i8", "_non_range_i16", "_non_range_i32",
		"_non_range_i64", "_non_range_i128", "_non_range_isize",
		"_non_range_u8", "_non_range_u16", "_non_range_u32",
		"_non_range_u64", "_non_range_u128", "_non_range_usize",
		]
		_non_range_i8 = ["_-non_range_any-_"]
		_non_range_u8 = ["_-non_range_any-_"]
		_non_range_i16 = ["_-non_range_any-_"]
		_non_range_u16 = ["_-non_range_any-_"]
		_non_range_i32 = ["_-non_range_any-_"]
		_non_range_u32 = ["_-non_range_any-_"]
		_non_range_i64 = ["_-non_range_any-_"]
		_non_range_u64 = ["_-non_range_any-_"]
		_non_range_i128 = ["_-non_range_any-_"]
		_non_range_u128 = ["_-non_range_any-_"]
		_non_range_isize = ["_-non_range_any-_"]
		_non_range_usize = ["_-non_range_any-_"]
	_range_all = [
		"_range_i8", "_range_i16", "_range_i32", "_range_i64", "_range_i128", "_range_isize",
		"_range_u8", "_range_u16", "_range_u32", "_range_u64", "_range_u128", "_range_usize",
		]
		_range_i8 = ["_-range_any-_"]
		_range_u8 = ["_-range_any-_"]
		_range_i16 = ["_-range_any-_"]
		_range_u16 = ["_-range_any-_"]
		_range_i32 = ["_-range_any-_"]
		_range_u32 = ["_-range_any-_"]
		_range_i64 = ["_-range_any-_"]
		_range_u64 = ["_-range_any-_"]
		_range_i128 = ["_-range_any-_"]
		_range_u128 = ["_-range_any-_"]
		_range_isize = ["_-range_any-_"]
		_range_usize = ["_-range_any-_"]
# (private reflexion)
_-niche_any-_ = []
	_-non_specific_any-_ = ["_-niche_any-_"]
	_-non_range_any-_ = ["_-niche_any-_"]
	_-range_any-_ = ["_-niche_any-_"]


# data capabilities
#
# The maximum tuple arity supported by ExtTuple:
# By default tuple arity is 15         # compile  4.9s
_tuple_arity_31 = []                   # compile  5.3s
_tuple_arity_63 = ["_tuple_arity_31"]  # compile  7.5s
_tuple_arity_95 = ["_tuple_arity_63"]  # compile 10.5s
_tuple_arity_127 = ["_tuple_arity_95"] # compile 14.9s


#* dependency features *#
# ------------------------------------------------------------------------------

dep_all = [ # enables all optional dependencies
	"atomic", "const-str", "crossterm", "hashbrown", "libm", "log",
	"memchr", "miniquad", "portable-atomic", "rand_core",
	"unicode-segmentation", "unicode-width", "wide",
] # enable groups of dependencies:
	dep_exec = ["atomic", "portable-atomic"]
	dep_lex = ["const-str", "memchr", "unicode-segmentation", "unicode-width"]
	dep_ui_term = ["const-str", "crossterm"]

atomic = ["dep:atomic"]
const-str = ["dep:const-str"]
crossterm = ["dep:crossterm", "std", "ui_service"]
hashbrown = ["dep:hashbrown"]
libm = ["dep:libm"]
log = ["dep:log"]
memchr = ["dep:memchr"]
miniquad = ["dep:miniquad", "std", "ui_service"]
portable-atomic = ["dep:portable-atomic"]
rand_core = ["dep:rand_core"]
unicode-segmentation = ["dep:unicode-segmentation"]
unicode-width = ["dep:unicode-width"]
wide = ["dep:wide"]


[dependencies]
# ==============================================================================

# non-optional:
devela_macros = { version  = "0.9.0" }
#devela_macros = { path = "./macros" }
paste_crate = { package = "paste", version = "1.0.14", default-features = false }

# optional:
const-str = { version = "0.5.6", default-features = false, optional = true }
libm = { version = "0.2.8", default-features = false, optional = true }
log = { version = "0.4.21", default-features = false, optional = true }
memchr = { version = "2.7.1", optional = true, default-features = false }
miniquad = { version = "0.4.0", default-features = false, optional = true }
rand_core = { version = "0.6.4", default-features = false, optional = true }
unicode-segmentation = { version = "1.10.1", default-features = false, optional = true }
unicode-width = { version = "0.1.11", default-features = false, optional = true }
wide = { version = "0.7.15", optional = true, default-features = false }

# non-optional:
[dependencies.bytemuck]
version = "1.14.0"
optional = false
default-features = false
features = ["align_offset", "min_const_generics", "must_cast", "zeroable_maybe_uninit"]

# optional:
[dependencies.atomic]
version = "0.6.0"
optional = true
default-features = false
features = ["fallback"]
[dependencies.crossterm]
version = "0.27.0"
optional = true
default-features = false
features = ["events", "windows", "bracketed-paste"]
[dependencies.hashbrown]
version = "0.14.1"
optional = true
default-features = false
features = ["ahash", "inline-more"]
[dependencies.portable-atomic]
version = "1.4.3"
optional = true
default-features = false
features = ["fallback", "float"]

[dev-dependencies]
# ------------------------------------------------------------------------------

devela = { path = ".", features = ["all"] }


# profiles
# ==============================================================================

# [profile.dev]
# codegen-backend = "cranelift"

# [profile.dev.package."*"]
# codegen-backend = "llvm"
# opt-level = 3


[package.metadata.docs.rs]
# ==============================================================================
no-default-features = true
features = ["_docsrs_max"]
rustdoc-args = [ "--html-in-header", "./DOCS/rustdoc-header.html" ]

[badges]
maintenance = { status = "experimental" }


# benchmarks
# ==============================================================================


# examples
# ==============================================================================

[[example]]
name = "bitfield"
required-features = ["data_bit", "_u8"]
[[example]]
name = "cargo_script"
required-features = ["__excluded"]
[[example]]
name = "coro_run"
required-features = ["unsafe_async", "alloc"]
[[example]]
name = "enumset"
required-features = ["data_bit", "_u8"]
[[example]]
name = "cli_prompt"
required-features = ["ui_term", "crossterm", "std"]
