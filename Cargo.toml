[workspace]

members = [".", "macros", "depend"]


[package]

name = "devela"
description = "A cohesive development foundation."
version = "0.20.0-wip"
edition = "2021"
rust-version = "1.75.0" # sync with readme & .github/*/check.yml
authors = ["Jos√© Luis Cruz <joseluis@andamira.net>"]
repository = "https://github.com/andamira/devela"
documentation = "https://docs.rs/devela"
license = "MIT OR Apache-2.0"
include = [
	"/Cargo.toml",
	"/DOCS/*.md",
	"/src/**/*.rs", "/src/**/*.md", "src/**/*.html",
]
categories = ["development-tools", "rust-patterns", "no-std::no-alloc"]
keywords = ["dev", "helper", "helpers", "extension", "extensions"]
publish = true


# ------------------------------------------------------------------------------
# Features are grouped in 5 (mostly) independent categories:
# - Environment
# - Module
# - Safety
# - Nightly
# - Dependency

[features]

# default = []
docsrs = ["all", "std", "unsafe", "nightly", "dep", "libm"]


#* environment features *#

std = [ # disables `no_std` compatibility and enables `std` functionality
	"alloc",
	"dep?/std",
	"atomic?/std", "bytemuck?/extern_crate_std"
]
alloc = [ # enables `alloc` functionality
	"dep?/alloc",
	"bytemuck?/extern_crate_alloc",
]
no_std = [ # enables functionality incompatible with `std`
	"dep?/libm",
]


#* module features *#

all = [ # enables all the modules and submodules
	"code",
	"data",
	"error",
	"io",
	"mem",
	"num", "num_all",
	"os", # "os_all",
	"render",
	"text",
	"time",
	"ui", "ui_all",
	"work", # "work_all",
	]

# individual modules
code = []
data = ["dep?/bytemuck", "dep?/hashbrown"]
error = []
io = []
mem = ["dep?/bytemuck"]
num = []
	num_all = [ "num_niche_impls" ]
	num_niche_impls = [] # extra impls for niche types
os = []
render = []
text = ["dep?/const-str", "dep?/unicode-segmentation", "dep?/unicode-width"]
time = []
ui = []
	ui_all = [ "ui_term" ]
	ui_term = ["dep?/const-str"] # terminal support
work = ["dep?/atomic", "dep?/portable-atomic", "bytemuck?/zeroable_atomics"]


#* safety features *#

# In order to use any unsafe functionality:
# 1. enable the corresponding `unsafe` feature.
# 2. don't enable `safe` feature in the module.

safe = [ # forbids `unsafe` (and overrides unsafe features)
	"safe_data", "safe_error", "safe_mem", "safe_num",
	"safe_os", "safe_text", "safe_ui", "safe_work",
] # in specific modules:
	safe_data = []
	safe_error = []
	safe_mem = []
	safe_num = []
	safe_os = []
	safe_text = []
	safe_ui = ["safe_ui_term"]
		safe_ui_term = []
	safe_work = []

unsafe = [ # enables `unsafe` (as long as it isn't forbidden in the module)
	"unsafe_array", "unsafe_async", "unsafe_const", "unsafe_dyn",
	"unsafe_niche", "unsafe_ptr", "unsafe_slice", "unsafe_str",
] # for specific purposes:
	unsafe_array = [] # faster array initialization.
	unsafe_async = [] # custom task waker, coroutine impls.
	unsafe_const = [] # extra const methods.
	unsafe_dyn = [] # DSTs in the stack, no_std Error dyn impls.
	unsafe_niche = [] # unchecked niche constructors.
	unsafe_ptr = [] # pop methods without Clone.
	unsafe_slice = [] # extra slice methods, avoid bound checks.
	unsafe_str = [] # unchecked utf-8 char and &str conversions.


#* nightly features *#

nightly = [ # enables nightly features
	"nightly_coro", "nightly_doc",
] # specific unstable features:
	nightly_coro= [] # coroutines, coroutine_trait
	nightly_doc = [] # doc_cfg


#* dependency features *#

dep = ["dep:dep"] # module features enables their dependencies as defined.

atomic = ["dep:atomic"]
bytemuck = ["dep:bytemuck"]
const-str = ["dep:const-str"]
libm = ["dep:libm"]
hashbrown = ["dep:hashbrown"]
portable-atomic = ["dep:portable-atomic"]
unicode-segmentation = ["dep:unicode-segmentation"]
unicode-width = ["dep:unicode-width"]


# ------------------------------------------------------------------------------

[dependencies]
devela_macros = { version  = "0.8.0" }
#devela_macros = { path = "./macros" }
paste_crate = { package = "paste", version = "1.0.14", default-features = false }

# There are two options for enabling optional dependencies:
#
# option A) When the `depend` feature is enabled each optional dependency will
# be automatically enabled by some individual module feature, as defined above:
dep = { package = "devela_depend", version = "0.2.0", optional = true }
#dep = { package = "devela_depend", path = "./depend", optional = true }
#
# option B) Otherwise optional features can be manually enabled:
const-str = { version = "0.5.6", default-features = false, optional = true }
libm = { version = "0.2.8", default-features = false, optional = true }
unicode-segmentation = { version = "1.10.1", default-features = false, optional = true }
unicode-width = { version = "0.1.11", default-features = false, optional = true }
[dependencies.atomic]
version = "0.6.0"
default-features = false
optional = true
features = ["fallback"]
[dependencies.bytemuck]
version = "1.14.0"
default-features = false
optional = true
features = ["align_offset", "min_const_generics", "must_cast", "zeroable_maybe_uninit"]
[dependencies.hashbrown]
version = "0.14.1"
default-features = false
optional = true
features = ["ahash", "inline-more"]
[dependencies.portable-atomic]
version = "1.4.3"
default-features = false
optional = true
features = ["fallback", "float"]

[dev-dependencies]
devela = { path = ".", features = ["all"] }


# ------------------------------------------------------------------------------

[package.metadata.docs.rs]
no-default-features = true
features = ["docsrs"]
rustdoc-args = [ "--html-in-header", "./src/_docs/rustdoc-header.html" ]

[badges]
maintenance = { status = "experimental" }
