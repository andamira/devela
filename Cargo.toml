[workspace]

members = [".", "macros", "depend"]


[package]

name = "devela"
description = "Development extensions for the Rust Standard Library"
version = "0.16.0-wip"
edition = "2021"
rust-version = "1.73.0" # sync with readme & .github/*/check.yml
authors = ["Jos√© Luis Cruz <joseluis@andamira.net>"]
repository = "https://github.com/andamira/devela"
documentation = "https://docs.rs/devela"
license = "MIT OR Apache-2.0"
include = [
	"/Cargo.toml",
	"/src/**/*.rs", "/src/**/*.md",
	"/README.md", "/DERIVED.md", "/LICENSE-*",
]
categories = ["development-tools", "rust-patterns", "no-std::no-alloc"]
keywords = ["dev", "helper", "helpers", "extension", "extensions"]
publish = true


# ------------------------------------------------------------------------------
# Features are grouped in 6 (mostly) independent categories:
# - Environment
# - Platform
# - Module
# - Safety
# - Nightly
# - Dependency

[features]

# default = []


#* environment features *#

std = [ # disables `no_std` compatibility and enables `std` functionality
	"alloc",
	"depend?/std",
	"atomic?/std", "bytemuck?/extern_crate_std"
]
alloc = [ # enables `alloc` functionality
	"depend?/alloc",
	"bytemuck?/extern_crate_alloc",
]
no_std = [] # enables functionality incompatible with `std` (unused)


#* platform specific features *#

linux = [] # enables os::linux functionality
linux_unsafe = ["linux", "unsafe_linux"]
term = []
term_unsafe = ["term", "unsafe_term"]
# wasm = []
# windows = []
# macos = []
# esp32 = []


#* module features *#

full = [ # enables all the modules
	"any", "cmp", "codegen", "convert", "data",
	"future", "mem", "num", "ops", "option", "path", "result",
	"string", "sync", "task", "thread", "time",
	# os platform sub-modules:
	"linux", "term",
	]
	full_unsafe = ["full", "unsafe"]
fullest = ["full"] # enables `full` recursively (unused)

async = ["future", "task"]
	async_unsafe = ["future_unsafe", "task_unsafe"]

# individual modules (17)
# (modules enable their own dependencies if the `depend` feature is enabled)
any = []
cmp = []
codegen = ["depend?/devela_macros"]
convert = ["depend?/az"]
data = ["depend?/hashbrown"]
future = []
mem = ["depend?/bytemuck"]
num = []
ops = []
option = []
path = []
result = []
string = ["depend?/const-str", "depend?/unicode-segmentation"]
sync = ["depend?/atomic", "depend?/portable-atomic", "bytemuck?/zeroable_atomics"]
task = []
thread = []
time = []

# individual modules with unsafe enabled (17):
any_unsafe = ["any", "unsafe_any"]
cmp_unsafe = ["cmp", "unsafe_cmp"]
codegen_unsafe = ["codegen", "unsafe_codegen"]
convert_unsafe = ["convert", "unsafe_convert"]
data_unsafe = ["data", "unsafe_data"]
future_unsafe = ["future", "unsafe_future"]
mem_unsafe = ["mem", "unsafe_mem"]
num_unsafe = ["num", "unsafe_num"]
ops_unsafe = ["ops", "unsafe_ops"]
option_unsafe = ["option", "unsafe_option"]
path_unsafe = ["path", "unsafe_path"]
result_unsafe = ["result", "unsafe_result"]
string_unsafe = ["string", "unsafe_string"]
sync_unsafe = ["sync", "unsafe_sync"]
task_unsafe = ["task", "unsafe_task"]
thread_unsafe = ["thread", "unsafe_thread"]
time_unsafe = ["time", "unsafe_time"]


#* safety features *#

unsafe = [ # enables unsafe features in this crate (23)
	"unsafe_any", "unsafe_cmp", "unsafe_codegen",
	"unsafe_convert", "unsafe_data", "unsafe_future",
	"unsafe_mem", "unsafe_num", "unsafe_ops", "unsafe_option", "unsafe_os",
	"unsafe_path", "unsafe_result", "unsafe_string",
	"unsafe_sync", "unsafe_task", "unsafe_thread", "unsafe_time",
	]
	unsafe_any = [] # (unused)
	unsafe_cmp = [] # enables const floating-point comparisons
	unsafe_codegen = [] # (unused)
	unsafe_convert = [] # enables using `MaybeUninit` for array initalization
	unsafe_data = [] # (unused)
	unsafe_future = [] # (unused)
	unsafe_mem = [] # enables `as_bytes*` functions and bytemuck's traits
	unsafe_num = [] # enables unsafe constructors and bytemuck's traits
	unsafe_ops = [] # (unused)
	unsafe_option = [] # (unused)
	unsafe_os = [ # enables unsafe functionality for OS platforms:
		"unsafe_linux", "unsafe_term",
		]
		unsafe_linux = [] # enables linux syscalls
		unsafe_term = [] # (unused)
	unsafe_path = [] # (unused)
	unsafe_result = [] # (unused)
	unsafe_string = [] # enables unsafe use in `string`
	unsafe_sync = [] # (unused)
	unsafe_task = [] # enables a coroutines implementation.
	unsafe_thread = [] # (unused)
	unsafe_time = [] # (unused)
safe = [] # forbids `unsafe` in this crate
safest = ["safe"] # forbids `unsafe` recursively (unused)
unsafest = ["unsafe"] # enables `unsafe` recursively (unused)


#* nightly features *#

nightly = [ # enables nightly features
	]
nightly_docs = [ # enables features for docs.rs
	"nightly", "full", "std", "unsafe", "depend",
]


#* dependency features *#

depend = ["dep:depend"] # module features enables their dependencies as defined.

atomic = ["dep:atomic"]
az = ["dep:az"]
bytemuck = ["dep:bytemuck"]
const-str = ["dep:const-str"]
devela_macros = ["dep:devela_macros"]
hashbrown = ["dep:hashbrown"]
portable-atomic = ["dep:portable-atomic"]
unicode-segmentation = ["dep:unicode-segmentation"]


# ------------------------------------------------------------------------------

[dependencies]

# only one non-optional dependency
paste_crate = { package = "paste", version = "1.0.14", default-features = false }

# There are two options for enabling optional dependencies:
#
# option A) When the `depend` feature is enabled each optional dependency will
# be automatically enabled by some individual module feature, as defined above:
depend = { package = "devela_depend", version = "0.1.1", optional = true }
#depend = { package = "devela_depend", path = "./depend", optional = true }
#
# option B) Otherwise optional features can be manually enabled:
az = { version = "1.2.1", default-features = false, optional = true }
const-str = { version = "0.5.6", default-features = false, optional = true }
devela_macros = { version  = "0.7.0", optional = true }
#devela_macros = { path = "./macros", optional = true }
unicode-segmentation = { version = "1.10.1", default-features = false, optional = true }
[dependencies.atomic]
version = "0.6.0"
default-features = false
optional = true
features = ["fallback"]
[dependencies.bytemuck]
version = "1.14.0"
default-features = false
optional = true
features = ["align_offset", "min_const_generics", "must_cast", "zeroable_maybe_uninit"]
[dependencies.hashbrown]
version = "0.14.1"
default-features = false
optional = true
features = ["ahash", "inline-more"]
[dependencies.portable-atomic]
version = "1.4.3"
default-features = false
optional = true
features = ["fallback", "float"]

[dev-dependencies]

devela = { path = ".", features = ["full", "depend"] }


# ------------------------------------------------------------------------------

[package.metadata.docs.rs]
no-default-features = true
features = ["nightly_docs"]

[badges]
maintenance = { status = "experimental" }
