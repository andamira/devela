# https://doc.rust-lang.org/cargo/reference/manifest.html
# ==============================================================================

[workspace]
members = [".", "macros"]
resolver = "2"

[lib]
# path = "./src/lib.rs"
bench = false

[package]
name = "devela"
description = "A meta-cohesive development layer."
version = "0.22.0-wip"
edition = "2021"
rust-version = "1.82.0" # sync with README.md & .github/workflows/check.yml
authors = ["José Luis Cruz <joseluis@andamira.net>"]
repository = "https://github.com/andamira/devela"
documentation = "https://docs.rs/devela"
license = "MIT OR Apache-2.0"
include = [
	"/Cargo.toml",
	"/DOCS/*", "/LICENSE*",
	"/build/**/*.rs",
	"/src/**/*.rs", "/src/**/*.md",

	# examples used in docs:
	"/examples/bitfield.rs",
	"/examples/enumset.rs",
	"/examples/id_seq.rs",
	"/examples/niche.rs",
]
categories = ["development-tools", "rust-patterns", "no-std::no-alloc"]
keywords = ["dev", "helper", "library", "std", "extension"]
build = "build/mod.rs"
publish = true


[features] # 192/300 (108 remaining), 77 visible, 115 hidden
# https://doc.rust-lang.org/cargo/reference/features.html
# ==============================================================================
# Features are grouped in the following categories:
# - Miscellaneous    __[dbg,…]
# - Environment      alloc,[no_]std
# - Modules
# - Safety           [safe|unsafe]_
# - Nightly          nightly_[coro|simd|stable[_…]]
# - Capability       _[data,num,…]
# - Dependencies     (dep_[all|linux|text|…]
#
# Sintax:
# - ["name"]: Visible public-facing features.
# - ["_name"]: Hidden extra capability features.
# - ["__name"]: Miscellaneous maintenance features.
#
# Files:
# - Features are in sync with build/features.rs & src/_doc/features.md.
# - We can use the utils/features.sh script to list and count features.


#* Miscellaneous features *#
# ------------------------------------------------------------------------------

# default = []

__dbg = [] # for debugging purposes, shows enabled features
__lints = [] # enables extra lints (enabled on cl* aliases)
__no_test = [] # allows excluding examples from being tested

__force_miri_dst = [] # inhibits disabling miri on the data::dst module


#* Environment features *#
# ------------------------------------------------------------------------------

alloc = [ # enables `alloc` functionality
	"bytemuck?/extern_crate_alloc",
	"memchr?/alloc", "rand_core?/alloc"
]
std = [ # disables `no_std` compatibility and enables `std` functionality
	"alloc",
	"atomic?/std", "bytemuck?/extern_crate_std", "log?/std", "memchr?/std",
	"rand_core?/std", "wide?/std",
]
no_std = [] # enables functionality incompatible with or substitute of `std`


#* Modules features *#
# ------------------------------------------------------------------------------

all = [ # enables all the modules and submodules
	# "code", "data", "error",
	"mem", "num", "rend", "sys", "text", "work",
]
# code = []
# data = []
# error = []
mem = [
	"mem_bit",
	]
	mem_bit = [] # BitSize
num = [
	"geom", "rand", "wave",
	]
	geom = [] # geometry, linear algebra
	rand = [] # random number generators
	wave = [] # wavelets
rend = [
	"audio", "color", "draw", "font", "image", "layout",
	]
	audio = []
	draw = []
	color = []
	font = []
	image = []
	layout = []
sys = ["time"]
	# os
		linux = [] # sys::os::linux functionality
	time = [] # time-related functionality
text = []
work = ["bytemuck?/zeroable_atomics"]


#* Safety features *#
# ------------------------------------------------------------------------------
# They are prefixed with either `safe_` or `unsafe_`.
# Safe features are associated to *modules*, and unsafe features to *purposes*.
#
# Usage:
# 1. enable the desired `unsafe` feature.
# 2. don't enable the `safe` feature for that module.
#
# The `safest` feature forbids unsafe transitively in dependencies
# (except for `core`, `alloc` and `std`).

safe = [ # forbids `unsafe` (and overrides unsafe features)
	"safe_code", "safe_data", "safe_error", "safe_mem", "safe_num",
	"safe_rend", "safe_sys", "safe_time", "safe_text", "safe_work",
] # in specific modules:
	safe_code = []
	safe_data = []
	safe_error = []
	safe_mem = []
	safe_num = []
	safe_rend = []
	safe_sys = ["safe_time"]
		safe_time = []
	safe_text = []
	safe_work = []

unsafe = [ # enables `unsafe` (as long as it isn't forbidden in the module)
	"unsafe_array", "unsafe_async", "unsafe_const", "unsafe_hint",
	"unsafe_layout", "unsafe_niche", "unsafe_ptr", "unsafe_slice",
	"unsafe_str", "unsafe_sync", "unsafe_syscall", "unsafe_thread",
] # for specific purposes:
	unsafe_array = [] # faster array initialization, UninitArray.
	unsafe_async = [] # task_waker_noop, CoroRun.
	unsafe_const = [] # extra const methods.
	unsafe_hint = [] # unreachable_unchecked, assert_unchecked.
	unsafe_layout = [] # MemPod, DSTs in the stack, ExtAny::downcast*.
	unsafe_niche = [] # unchecked niche constructors.
	unsafe_ptr = [] # Pinned, pop methods without Clone.
	unsafe_slice = [] # extra slice methods, avoid bound checks.
	unsafe_str = [] # unchecked utf-8 char and &str conversions.
	unsafe_sync = [] # Send and Sync impls.
	unsafe_syscall = [] # os syscalls.
	unsafe_thread = [] # Logging::set_logger_racy, Env::{remove_var, set_var}.

safest = [ # forbids `unsafe` even in dependencies (except standard library)
	"safe",
]


#* Nightly features *#
# ------------------------------------------------------------------------------
# They are prefixed with `nightly_`.

nightly = [ # sync with src/lib.rs
	"nightly_coro", "nightly_doc", "nightly_simd", "nightly_stable",
] # enables all the following features:
	# WAIT: [doc_cfg](https://github.com/rust-lang/rust/issues/43781)
	# WAIT: [doc_notable_trait](https://github.com/rust-lang/rust/issues/45040)
	nightly_doc = [] # NO: doc_auto_cfg
	# WAIT: [coroutines](https://github.com/rust-lang/rust/issues/43122)
	nightly_coro= [] # coroutines, coroutine_trait, iter_from_coroutine
	# WAIT: [portable_simd](https://github.com/rust-lang/rust/issues/86656)
	nightly_simd = []
	# WAIT: https://releases.rs/ ; See: ./tools/release_dates.rs
	nightly_stable = [ # a selection of nightly features that will become stable soon:
		"nightly_stable_next1", "nightly_stable_next2", "nightly_stable_later"]
		nightly_stable_next1 = [] # 1.83
		nightly_stable_next2 = [] # 1.84
		nightly_stable_later = [] # 1.?? stable soon enough
	#
	##1.83 will be stable on 2024-11-28:
	# 1.83:  [char::MIN](https://github.com/rust-lang/rust/pull/130154)
	# 1.83:  [const_cell_into_inner](https://github.com/rust-lang/rust/pull/130972)
	# 1.83:  [const_char_encode_utf8](https://github.com/rust-lang/rust/pull/131463)
	# 1.83:  [const_extern_fn](https://github.com/rust-lang/rust/pull/129753)
	# 1.83:  [const_float_bits_conv](https://github.com/rust-lang/rust/pull/129555)
	# 1.83:  [const_float_classify](https://github.com/rust-lang/rust/pull/130157)
	# 1.83:  [const_intrinsic_copy](https://github.com/rust-lang/rust/pull/130762)
	# 1.83:  [const_maybe_uninit_as_mut_ptr](https://github.com/rust-lang/rust/pull/130542)
	# 1.83:  [const_mut_refs|const_refs_to_cell](https://github.com/rust-lang/rust/pull/129195)
	# 1.83:  [const_refs_to_static](https://github.com/rust-lang/rust/pull/129759)
	# 1.83:  [const_result](https://github.com/rust-lang/rust/pull/131287)
	# 1.83:  [const_slice_from_raw_parts_mut](https://github.com/rust-lang/rust/pull/130403)
	# 1.83:  [const_slice_split_at_mut](https://github.com/rust-lang/rust/pull/130428)
	# 1.83:  [duration_consts_float](https://github.com/rust-lang/rust/pull/131289)
	# 1.83:  [entry_insert](https://github.com/rust-lang/rust/pull/130290)
	# 1.83:  [io_error_more](https://github.com/rust-lang/rust/pull/128316)
	# 1.83:  [mpmc_channel](https://github.com/rust-lang/rust/pull/126839)
	# 1.83:  [r#ident](https://github.com/rust-lang/rust/pull/126452)
	# 1.83:  [rustdoc: table of contents](https://github.com/rust-lang/rust/pull/120736)
	# 1.83:  [waker_getters](https://github.com/rust-lang/rust/pull/129919)
	#
	##1.84 will be stable on 2024-01-09:
	# 1.84:  [const_make_ascii](https://github.com/rust-lang/rust/pull/131496)
	# 1.84:  [const_maybe_uninit_assume_init](https://github.com/rust-lang/rust/pull/131274)
	# 1.84:  [pin_deref_mut](https://github.com/rust-lang/rust/pull/129424)
	#
	##1.‥… later
	# 1.??: ✗[async_closure](https://github.com/rust-lang/rust/pull/132706)
	# 1.??: ✗[box_uninit_write](https://github.com/rust-lang/rust/issues/129397)
	# 1.??: ✗[const_array_from_ref|const_slice_from_ref](https://github.com/rust-lang/rust/issues/90206)
	# 1.??: ✗[const_atomic_from_ptr](https://github.com/rust-lang/rust/pull/131717)
	# 1.??: ✗[const_maybe_uninit_write](https://github.com/rust-lang/rust/pull/131713)
	# 1.??: ✗[diagnostic::do_not_recommend](https://github.com/rust-lang/rust/pull/132056)
	# 1.??: ✗[impl_trait_in_assoc_type](https://github.com/rust-lang/rust/pull/120700)
	# 1.??: ✗[isqrt](https://github.com/rust-lang/rust/pull/131391)
	# 1.??: ✗[let_chains](https://github.com/rust-lang/rust/pull/132833)
	# 1.??: ✗[macro_metavar_expr](https://github.com/rust-lang/rust/pull/122808)
	# 1.??: ✗[new_zeroed_alloc](https://github.com/rust-lang/rust/issues/129396)
	# 1.??: ✗[num_midpoint|const_num_midpoint](https://github.com/rust-lang/rust/pull/131784)
	# 1.??: ✗[noop_waker](https://github.com/rust-lang/rust/issues/98286) work::async::waker
	# 1.??: ✗[unsafe_cell_from_mut](https://github.com/rust-lang/rust/pull/131261)
	#
	##.‥… much later
	# 1.?? [const_for](https://github.com/rust-lang/rust/issues/87575) depends on const_trait_impl
	# 1.?? [const_trait_impl](https://github.com/rust-lang/rust/issues/67792)
	#
	## Experimental features:
	# [stmt_expr_attributes](https://github.com/rust-lang/rust/issues/15701)
	# [ptr_metadata](https://github.com/rust-lang/rust/issues/81513)


#* Capability features *#
# ------------------------------------------------------------------------------
# These features are prefixed with an underscore (_) and therefore semi-hidden.
#
# Enabling them enables extra implementations which increases compilation times.
#
# They set automatic compile flags named `_*_·`, used for reflection.
# For example, `_stack_·` will be set if any _stack_* feature is enabled.

#* data capabilities *#
# ---------------------

_data_all = ["_bit_all", "_collections_all", "_tuple", "_sort_all"]

# `Bitwise`, `bitfield`, `enumset`:
_bit_all = [
	"_bit_i8", "_bit_i16", "_bit_i32", "_bit_i64", "_bit_i128", "_bit_isize",
	"_bit_u8", "_bit_u16", "_bit_u32", "_bit_u64", "_bit_u128", "_bit_usize"]
	_bit_i8 = []
	_bit_i16 = []
	_bit_i32 = []
	_bit_i64 = []
	_bit_i128 = []
	_bit_isize = []
	_bit_u8 = []
	_bit_u16 = []
	_bit_u32 = []
	_bit_u64 = []
	_bit_u128 = []
	_bit_usize = []

# `Destaque*`, `Graph*`, `Node*`, `Stack*`, `Tuple`:
_collections_all = [ "_destaque_all", "_graph_all", "_node_all", "_stack_all", "_tuple" ]
	_destaque_all = ["_destaque_u8", "_destaque_u16", "_destaque_u32", "_destaque_usize"]
		_destaque_u8 = []
		_destaque_u16 = []
		_destaque_u32 = []
		_destaque_usize = []
	_graph_all = ["_graph_u8", "_graph_u16", "_graph_u32", "_graph_usize"]
		_graph_u8 = ["_node_u8"]
		_graph_u16 = ["_node_u16"]
		_graph_u32 = ["_node_u32"]
		_graph_usize = ["_node_usize"]
	_node_all = ["_node_u8", "_node_u16", "_node_u32", "_node_usize"]
		_node_u8 = []
		_node_u16 = []
		_node_u32 = []
		_node_usize = []
	_stack_all = ["_stack_u8", "_stack_u16", "_stack_u32", "_stack_usize"]
		_stack_u8 = []
		_stack_u16 = []
		_stack_u32 = []
		_stack_usize = []

# `Tuple` trait and maximum arity supported (example relative compilation times)
_tuple = [] # arity 12    # time:  3.3s, codegen: 96K  (for >=2nd compilations)
_tuple_24 = ["_tuple"]    # time:  4.0s, codegen: 279K
_tuple_36 = ["_tuple_24"] # time:  4.6s, codegen: 561K
_tuple_48 = ["_tuple_36"] # time:  6.3s, codegen: 942K
_tuple_72 = ["_tuple_48"] # time: 10.3s, codegen: 2.0M

# `Sort`:
_sort_all = [
	"_sort_i8", "_sort_i16", "_sort_i32", "_sort_i64", "_sort_i128", "_sort_isize",
	"_sort_u8", "_sort_u16", "_sort_u32", "_sort_u64", "_sort_u128", "_sort_usize",
	"_sort_f32", "_sort_f64"]
	_sort_i8 = []
	_sort_i16 = []
	_sort_i32 = []
	_sort_i64 = []
	_sort_i128 = []
	_sort_isize = []
	_sort_u8 = []
	_sort_u16 = []
	_sort_u32 = []
	_sort_u64 = []
	_sort_u128 = []
	_sort_usize = []
	_sort_f32 = ["_cmp_f32"]
	_sort_f64 = ["_cmp_f64"]

#* num capabilities *#
# ---------------------

_num_all = ["_nums_all", "_cmp_all"]

# `Compare`:
_cmp_all = [
	"_cmp_i8", "_cmp_i16", "_cmp_i32", "_cmp_i64", "_cmp_i128", "_cmp_isize",
	"_cmp_u8", "_cmp_u16", "_cmp_u32", "_cmp_u64", "_cmp_u128", "_cmp_usize",
	"_cmp_f32", "_cmp_f64"]
	_cmp_i8 = []
	_cmp_i16 = []
	_cmp_i32 = []
	_cmp_i64 = []
	_cmp_i128 = []
	_cmp_isize = []
	_cmp_u8 = []
	_cmp_u16 = []
	_cmp_u32 = []
	_cmp_u64 = []
	_cmp_u128 = []
	_cmp_usize = []
	_cmp_f32 = ["_float_f32"]
	_cmp_f64 = ["_float_f64"]

# `[Num]Int`, `[Num]Float`, `[Num]Frac`, `Point`, `Angle`, `Vector`:
_nums_all = ["_float_all", "_int_all"]
	_float_all = ["_float_f32", "_float_f64"]
		_float_f32 = []
		_float_f64 = []
	_int_all = ["_int_iall", "_int_uall"]
		_int_iall = ["_int_i8", "_int_i16", "_int_i32", "_int_i64", "_int_i128", "_int_isize"]
			_int_i8 = []
			_int_i16 = []
			_int_i32 = []
			_int_i64 = []
			_int_i128 = []
			_int_isize = []
		_int_uall = ["_int_u8", "_int_u16", "_int_u32", "_int_u64", "_int_u128", "_int_usize"]
			_int_u8 = []
			_int_u16 = []
			_int_u32 = []
			_int_u64 = []
			_int_u128 = []
			_int_usize = []

#* text capabilities *#
# ---------------------

_text_all = ["_char_all", "_string_all"]

# Char*
_char_all = ["_char_u7", "_char_u8", "_char_u16", "_char_u24", "_char_u32"]
	_char_u7 = []
	_char_u8 = []
	_char_u16 = []
	_char_u24 = []
	_char_u32 = []

# StringU*, StringNonul:
_string_all = [
	"_string_u8", "_string_u16", "_string_u32", "_string_usize",
	"_string_nonul"]
	_string_u8 = []
	_string_u16 = []
	_string_u32 = []
	_string_usize = []
	#
	_string_nonul = []

#* default and docs *#
# ------------------------------

# _default = [] # default capabilities

# The most complete versions of the documentation:
_docsrs = ["_docsrs_min", "_docs_max"]
_docsrs_min = ["_docsrs_nodep", "dep_all"]
_docsrs_nodep = ["_docsrs_stable_nodep", "nightly"]

_docsrs_stable = ["_docsrs_stable_min", "_docs_max"]
_docsrs_stable_min = ["_docsrs_stable_nodep", "dep_all"]
_docsrs_stable_nodep = ["std", "unsafe", "_docs_min"]

_docs_min = [ # the minimum capabilities that document all library items
	"all",
	"linux",
	# data:
	"_bit_u8",
	"_destaque_u8", "_stack_u8", "_graph_u8",
	"_tuple",
	# num:
	"_cmp_u8",
	"_float_f32", "_int_u8",
	# text:
	"_string_u8", "_string_nonul",
	"_char_u7", "_char_u8", "_char_u16", "_char_u24", "_char_u32",
]
_docs_max = [ # the maximum capabities relevant for documentation
	"_data_all", "_num_all", "_text_all"] # _tuple_72


#* Dependencies features *#
# ------------------------------------------------------------------------------
# The names are prefixed with `dep_`, and don't have dashes.
# They are associated to optional dependencies and groups of modules.
#
# It is in sync with ./tools/check.rs::DEP_ALL and build/features.rs
#
##Links
# - https://doc.rust-lang.org/edition-guide/rust-2024/cargo-remove-implicit-features.html

dep_all = [ # enables all optional dependencies:
	"dep_atomic", "dep_bytemuck", "dep_const_str", "dep_hashbrown", "dep_libm",
	"dep_log", "dep_macroquad", "dep_miniquad", "dep_memchr", "dep_miniquad",
	"dep_portable_atomic", "dep_rand_core", "dep_rodio", "dep_tinyaudio",
	"dep_unicode_segmentation", "dep_unicode_width", "dep_wide",
] # enable groups of dependencies (unlocking extra functionality in certain modules):
	linux_deps = ["dep_atomic", "dep_bytemuck"]
	text_deps = ["dep_const_str", "dep_memchr", "dep_unicode_segmentation", "dep_unicode_width"]
	work_deps = ["dep_atomic", "dep_portable_atomic", "dep_rayon"]

dep_atomic = ["dep:atomic"]
dep_bytemuck = ["dep:bytemuck"]
dep_const_str = ["dep:const-str"]
dep_hashbrown = ["dep:hashbrown", "alloc"]
dep_libm = ["dep:libm"]
dep_log = ["dep:log"]
dep_macroquad = ["dep:macroquad"]
dep_memchr = ["dep:memchr"]
dep_miniquad = ["dep:miniquad"]
dep_portable_atomic = ["dep:portable-atomic"]
dep_rand_core = ["dep:rand_core"]
dep_rayon = ["dep:rayon"]
dep_rodio = ["dep:rodio"]
dep_tinyaudio = ["dep:tinyaudio"]
dep_unicode_segmentation = ["dep:unicode-segmentation"]
dep_unicode_width = ["dep:unicode-width"]
dep_wide = ["dep:wide"]


[dependencies]
# https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
# ==============================================================================
# Crates using unsafe, even if transitively, are marked as so,
# preventing enabling them if the `safest` feature is enabled.

# non-optional:
devela_macros = { version  = "0.11.0" } # safe
#devela_macros = { path = "./macros" } # , features = ["std"] }
paste_crate = { package = "paste", version = "1.0.15", default-features = false } # safe, archived

# optional:
const-str = { version = "0.5.7", optional = true, default-features = false } # unsafe
libm = { version = "0.2.11", optional = true, default-features = false } # unsafe
log = { version = "0.4.22", optional = true, default-features = false } # safe(optional_unsafe)
macroquad = { version = "0.4.13", optional = true, default-features = false } # unsafe
memchr = { version = "2.7.4", optional = true, default-features = false } # unsafe
miniquad = { version = "0.4.6", optional = true, default-features = false } # unsafe
rand_core = { version = "0.6.4", optional = true, default-features = false } # safe
rayon = { version = "1.10.0", optional = true, default-features = false } # unsafe
tinyaudio = { version = "1.0.0", optional = true, default-features = false } # unsafe
unicode-segmentation = { version = "1.12.0", optional = true, default-features = false } # safe
unicode-width = { version = "0.1.13", optional = true, default-features = false } # safe
wide = { version = "0.7.26", optional = true, default-features = false } # unsafe
[dependencies.atomic] # unsafe
version = "0.6.0"
optional = true
default-features = false
features = ["fallback"]
[dependencies.bytemuck] # unsafe
version = "1.19.0"
optional = true
default-features = false
features = ["align_offset", "min_const_generics", "must_cast", "zeroable_maybe_uninit"]
[dependencies.hashbrown] # unsafe
version = "0.15.1"
optional = true
default-features = false
features = ["default-hasher", "inline-more"]
[dependencies.portable-atomic] # unsafe
version = "1.9.0"
optional = true
default-features = false
features = ["fallback", "float"]
[dependencies.rodio] # unsafe_deps
version = "0.20.1"
optional = true
default-features = false
# features = ["claxon", "flac", "hound", "lewton", "mp3", "vorbis", "wav"]

[dev-dependencies]
# Used for benchmarks, examples and tests. They inherit from [dependencies].
# ------------------------------------------------------------------------------

devela = { path = ".", features = ["all"] }


[build-dependencies]
# Used for the build scripts. They do not inherit from [dependencies].
# ------------------------------------------------------------------------------


# patches
# ==============================================================================
# https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#the-patch-section

[patch.crates-io]
devela = { path = './' }


# profiles
# ==============================================================================

# [profile.dev]
# codegen-backend = "cranelift"

# [profile.dev.package."*"]
# codegen-backend = "llvm"
# opt-level = 3


[package.metadata.docs.rs]
# ==============================================================================
# https://docs.rs/about/metadata

no-default-features = true
features = ["_docsrs"]
rustdoc-args = [ "--html-in-header", "./DOCS/rustdoc-header.html" ]


[badges]
# ==============================================================================
maintenance = { status = "experimental" }


[lints.rust]
# ==============================================================================
# https://doc.rust-lang.org/cargo/reference/manifest.html#the-lints-section

# https://dev-doc.rust-lang.org/nightly/unstable-book/compiler-flags/check-cfg.html
# https://doc.rust-lang.org/rustc/check-cfg.html
[lints.rust.unexpected_cfgs]
level = "warn"
check-cfg = [ # Allowed config flags:
	# Defined if the library is compiled as the primary package (not a dependency).
	'cfg(cargo_primary_package)',
	#
	# Allows excluding tests from being run, more concisely:
	'cfg(__no_test)',
	#
	# Expect more pointer widths.
	'cfg(target_pointer_width, values("8", "128"))',
	#
	# Compilation flags for reflection are enabled in: "/build/features.rs"
	# ---------------------------------------------------------------------
	"cfg(_nightly_·, _dep_·)",
	'cfg(_mem_·, _num_·, _sys_·)',
	# data:
	'cfg(_bit_·, _destaque_·, _stack_·)',
	'cfg(_graph_·, _node_·)',
	# num:
	'cfg(_sort_·, _sort_int_·, _sort_float_·)',
	'cfg(_nums_·, _cmp_·, _float_·, _int_·, _int_i·, _int_u·)',
	'cfg(_non_value_·, _non_value_i_·, _non_value_u_·)',
	# rend:
	'cfg(_rend_·)',
	# text:
	'cfg(_char_·, _string_·, _string_u·)',
]


# [[bench]]
# ==============================================================================


# examples
# ==============================================================================

[[example]]
name = "bitfield"
required-features = ["_bit_u8"]
[[example]]
name = "cargo_script"
required-features = ["__no_test"]
[[example]]
name = "coro_run"
required-features = ["unsafe_async", "alloc"]
[[example]]
name = "enumset"
required-features = ["_bit_u8"]
[[example]]
name = "id_pin"
required-features = [] # optional: "alloc"
[[example]]
name = "id_seq"
required-features = []
[[example]]
name = "linux"
required-features = ["linux", "unsafe_syscall"]
