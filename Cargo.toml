[workspace]

members = [".", "macros"]


[package]

name = "devela"
description = "rust development helper & extension utilities"
version = "0.14.0"
edition = "2021"
rust-version = "1.72.1" # sync with readme, tools/check* & .github/*/check.yml
authors = ["JosÃ© Luis Cruz <joseluis@andamira.net>"]
repository = "https://github.com/andamira/devela"
documentation = "https://docs.rs/devela"
license = "MIT OR Apache-2.0"
include = [
	"/Cargo.toml",
	"/src/**/*.rs", "/src/**/*.md",
	"/README.md", "/DERIVED.md", "/LICENSE-*",
]
categories = ["development-tools", "rust-patterns", "no-std::no-alloc"]
keywords = ["dev", "helper", "helpers", "extension", "extensions"]
publish = true

# ------------------------------------------------------------------------------

[features]

# default = []


#* environment features *#

std = [ # disables `no_std` compatibility and enables `std` functionality
	"alloc",
	"atomic?/std",
	"bytemuck?/extern_crate_std"]
alloc = [ # enables `alloc` functionality
	"bytemuck?/extern_crate_alloc"]
no_std = [] # enables functionality incompatible with `std` (unused)


#* platform specific features *#

linux = ["os"] # enables os::linux functionality
linux_unsafe = ["linux", "unsafe_linux"]
# wasm = []
# windows = []
# macos = []
# esp32 = []


#* modules features *#

full = [ # enables all the modules (except the platform-specific ones above)
	"ascii", "char", "cmp", "codegen", "convert", "fmt", "future", "mem", "num",
	"ops", "option", "os", "path", "result", "slice", "str", "string", "sync",
	"task", "thread",
	]
	full_unsafe = ["full", "unsafe"]
fullest = ["full"] # enables `full` recursively (unused)

# grouped modules for convenience:
texts = [ # enables all *text* related sub-modules
	"ascii", "char", "fmt", "str", "string"
	]
	texts_unsafe = [
		"ascii_unsafe", "char_unsafe", "fmt_unsafe", "str_unsafe", "string_unsafe"
		]
async = ["future", "task"]
	async_unsafe = ["future_unsafe", "task_unsafe"]

# single modules (18):
ascii = []
char = []
cmp = []
codegen = ["devela_macros"]
convert = ["az"]
fmt = []
future = []
mem = ["bytemuck"]
num = []
ops = []
option = []
os = []
path = []
result = []
slice = []
str = ["const-str"]
string = ["unicode-segmentation"]
sync = ["atomic", "portable-atomic"]
task = []
thread = []

# single modules with unsafe support:
ascii_unsafe = ["ascii", "unsafe_ascii"]
char_unsafe = ["char", "unsafe_char"]
cmp_unsafe = ["cmp", "unsafe_cmp"]
codegen_unsafe = ["codegen", "unsafe_codegen"]
convert_unsafe = ["convert", "unsafe_convert"]
fmt_unsafe = ["fmt", "unsafe_fmt"]
future_unsafe = ["future", "unsafe_future"]
mem_unsafe = ["mem", "unsafe_mem"]
num_unsafe = ["num", "unsafe_num"]
ops_unsafe = ["ops", "unsafe_ops"]
option_unsafe = ["option", "unsafe_option"]
os_unsafe = ["os", "unsafe_os"]
path_unsafe = ["path", "unsafe_path"]
result_unsafe = ["result", "unsafe_result"]
slice_unsafe = ["slice", "unsafe_slice"]
str_unsafe = ["str", "unsafe_str"]
string_unsafe = ["string", "unsafe_string"]
sync_unsafe = ["sync", "unsafe_sync"]
task_unsafe = ["task", "unsafe_task"]
thread_unsafe = ["thread", "unsafe_thread"]


#* safety features *#

unsafe = [ # enables unsafe features in this crate
	"unsafe_ascii", "unsafe_char", "unsafe_cmp", "unsafe_codegen", "unsafe_convert", "unsafe_fmt",
	"unsafe_future", "unsafe_mem", "unsafe_num", "unsafe_ops", "unsafe_os", "unsafe_option",
	"unsafe_path", "unsafe_result", "unsafe_slice", "unsafe_str", "unsafe_string", "unsafe_sync",
	"unsafe_task", "unsafe_thread",
	]
	unsafe_ascii = [] # enables unchecked conversions in `ascii`
	unsafe_char = [] # enables unchecked conversions in `char`
	unsafe_cmp = [] # enables const floating-point comparisons
	unsafe_codegen = [] # (unused)
	unsafe_convert = [] # enables using `MaybeUninit` for array initalization
	unsafe_fmt = [] # enables `IntBuf` struct and `IntBufable` trait
	unsafe_future = [] # (unused)
	unsafe_mem = [] # enables `as_bytes*` functions and bytemuck's traits
	unsafe_num = [] # enables unsafe constructors and bytemuck's traits
	unsafe_ops = [] # (unused)
	unsafe_option = [] # (unused)
	unsafe_os = [ # enables unsafe OS functionality
		"unsafe_linux"]
		unsafe_linux = [] # enables linux syscalls
	unsafe_path = [] # (unused)
	unsafe_result = [] # (unused)
	unsafe_slice = [] # (unused)
	unsafe_str = [] # enables unsafe use in `str`
	unsafe_string = [] # enables unsafe use in `string`
	unsafe_sync = [] # (unused)
	unsafe_task = [] # (unused)
	unsafe_thread = [] # (unused)
safe = [] # forbids unsafe in this crate
safest = ["safe"] # forbids `unsafe` recursively (unused)
unsafest = ["unsafe"] # enables `unsafe` recursively (unused)


#* nightly features *#

nightly = [] # enables nightly features
nightly_docs = [ # enables features for docs.rs
	"nightly", "full", "std", "unsafe", "linux",
]


# ------------------------------------------------------------------------------

[dependencies]

paste_crate = { package = "paste", version = "1.0.14", default-features = false }

#* optional dependencies*#

devela_macros = { version  = "0.6.1", optional = true }
#devela_macros = { path = "./macros", optional = true }
az = { version = "1.2.1", default-features = false, optional = true }
bytemuck = { version = "1.13.1", default-features = false, optional = true }
const-str = { version = "0.5.6", default-features = false, optional = true }
unicode-segmentation = { version = "1.10.1", default-features = false, optional = true }
[dependencies.atomic]
version = "0.6.0"
default-features = false
optional = true
features = ["fallback"]
[dependencies.portable-atomic]
version = "1.4.3"
default-features = false
optional = true
features = ["fallback", "float"]


[dev-dependencies]
devela = { path = ".", features = ["full"] }


# ------------------------------------------------------------------------------

[package.metadata.docs.rs]
no-default-features = true
features = ["nightly_docs"]

[badges]
maintenance = { status = "experimental" }
