# ==============================================================================
# https://doc.rust-lang.org/cargo/reference/manifest.html
#
## Table of Contents
#
# * [workspace]
# * [package]
# * [lib]
#
# * [features]
#   - Development
#   - Environment          (std,alloc,no_std)
#   - Module               (data,media,num,sys,text,work…)
#   - Safety               (safe,unsafe,safest)
#   - Nightly
#   - Capability
#     - default/docs
#     - data
#     - num
#     - text
#   - Dependency
#
# * [dependencies] (required|optional)
#   * [dev-dependencies]
#   * [build-dependencies]
#
# * [patch]
# * [profile.*]
# * [package.metadata.*]
# * [badges]
#
# - lints
#   * [lints.rust]
#   * [lints.rustdoc]
#   * [lints.clippy]
#   * [lints.rust.unexpected_cfgs]
#
# * [[bench]]
# * [[example]]

[workspace]
members = [".", "macros"]
resolver = "2"

[package]
name = "devela"
description = "A cohesive development layer."
version = "0.22.0-wip"
edition = "2021"
rust-version = "1.83.0" # In sync with README.md & .github/workflows/check.yml
authors = ["José Luis Cruz <joseluis@andamira.net>"]
repository = "https://github.com/andamira/devela"
documentation = "https://docs.rs/devela"
license = "MIT OR Apache-2.0"
include = [
	"/Cargo.toml",
	"/build/**/*.rs",
	"/src/**/*.rs", "/src/**/*.md",
	"/DOCS/VENDORED*.md", "DOCS/*.html",
	"/LICENSE*",

	# examples used in docs:
	"/examples/bitfield.rs",
	"/examples/enumset.rs",
	"/examples/id_seq.rs",
	"/examples/niche.rs",
]
categories = ["development-tools", "rust-patterns", "no-std::no-alloc"]
keywords = ["dev", "helper", "library", "std", "extension"]
build = "build/mod.rs"
publish = true

[lib]
# path = "./src/lib.rs"
bench = false


[features] # 212/300 (88 remaining), 99 visible, 113 hidden
# ==============================================================================
# https://doc.rust-lang.org/cargo/reference/features.html

# Features are grouped in the following categories:
# - Development      __[dbg,…]
# - Environment      alloc,[no_]std
# - Module
# - Safety           [safe|unsafe]_
# - Nightly          nightly_[coro|simd|stable[_…]]
# - Capability       _[data,num,…]
# - Dependency       (dep_[all|linux|text|…]
#
# Sintax:
# - ["name"]: Visible public-facing features.
# - ["_name"]: Hidden extra capability features.
# - ["__name"]: Development & maintenance features.
#
# Notes:
# - Features are in sync with build/features.rs & src/_doc/features.md.
# - List and count features with the utils/manifest_features.sh script.


#* Development features *#
# ------------------------------------------------------------------------------

__dbg = [] # for debugging purposes, shows enabled features
__no_test = [] # allows excluding examples from being tested

__force_miri_dst = [] # inhibits disabling miri on the data::dst module


#* Environment features *#
# ------------------------------------------------------------------------------

alloc = [ # enables `alloc` functionality
	"bytemuck?/extern_crate_alloc", "jiff?/alloc", "memchr?/alloc",
	"rand_core?/alloc", "rustix?/alloc",
]
std = [ # disables `no_std` compatibility and enables `std` functionality
	"alloc",
	"atomic?/std", "bytemuck?/extern_crate_std", "jiff?/std", "js-sys?/std",
	"log?/std", "memchr?/std", "nc?/std", "rand_core?/std", "raw-cpuid?/std",
	"regex-lite?/std", "rustix?/std", "wasm-bindgen?/std", "web-sys?/std",
	"wide?/std",
]
no_std = [] # enables functionality incompatible with or substitute of `std`


#* Module features *#
# ------------------------------------------------------------------------------

all = [ # enables all the modules and submodules
	# "code", "data",
	"media", "num", "sys", "text", "work", "ui",
]
# code = []
# data = []
# lang = []
media = [ "audio", "color", "draw", "font", "image"]
	audio = []
	draw = []
	color = []
	font = []
	image = []
num = [
	"geom", "rand", "wave",
	]
	geom = [] # geometry, linear algebra
	rand = [] # random number generators
	wave = [] # wavelets
sys = ["io", "mem", "time"]
	io = []
	mem = ["bit"]
		bit = [] # BitSize
	# os
		linux = []
		windows = ["crossterm?/windows"]
	time = []
text = []
ui = ["layout"]
	layout = []
work = ["bytemuck?/zeroable_atomics"]


linux_deps = ["linux", "dep_atomic", "dep_bytemuck"]
text_deps = ["text", "dep_const_str", "dep_memchr", "dep_regex_lite", "dep_stringzilla",
	"dep_unicode_segmentation", "dep_unicode_width"]
work_deps = ["dep_atomic", "dep_portable_atomic", "dep_rayon"]


#* Safety features *#
# ------------------------------------------------------------------------------
# They are prefixed with either `safe` or `unsafe`.
# Safe features are associated to *modules*, and unsafe features to *purposes*.
#
# Usage:
# 1. enable the desired `unsafe` feature.
# 2. don't enable the `safe` feature for that module.
#
# The `safest` feature forbids unsafe transitively in dependencies
# (except for Rust's `core`, `alloc` and `std`).

safe = [ # forbids `unsafe` (and overrides unsafe features)
	"safe_code", "safe_data", "safe_lang",
	"safe_media", "safe_num", "safe_sys", "safe_text", "safe_work",
] # in 9 specific root modules:
	safe_code = []
	safe_data = []
	safe_lang = []
	safe_media = ["safe_audio", "safe_color", "safe_draw", "safe_font", "safe_image"]
		safe_audio = []
		safe_color = []
		safe_draw = []
		safe_font = []
		safe_image = []
	safe_num = []
	safe_sys = ["safe_io", "safe_mem", "safe_time"]
		safe_io = []
		safe_mem = []
		safe_time = []
	safe_text = []
	safe_ui = ["safe_layout"]
		safe_layout = []
	safe_work = []

unsafe = [ # enables `unsafe` (as long as it isn't forbidden for that module)
	"unsafe_array", "unsafe_async", "unsafe_hint", "unsafe_layout",
	"unsafe_niche", "unsafe_ptr", "unsafe_slice", "unsafe_str",
	"unsafe_sync", "unsafe_syscall", "unsafe_thread",
] # for 11 specific purposes:
	unsafe_array = [] # faster array initialization, UninitArray.
	unsafe_async = [] # task_waker_noop, CoroRun.
	unsafe_hint = [] # unreachable_unchecked, unchecked arithmetic.
	unsafe_layout = [] # MemPod, DSTs in the stack, ExtAny::downcast*, Mem::*.
	unsafe_niche = [] # unchecked niche constructors.
	unsafe_ptr = [] # Pinned, pop methods without Clone, Ptr::*.
	unsafe_slice = [] # extra slice methods, avoid bound checks.
	unsafe_str = [] # unchecked utf-8 char and &str conversions.
	unsafe_sync = [] # Send and Sync impls.
	unsafe_syscall = [] # os syscalls.
	unsafe_thread = [] # Logging::set_logger_racy, Env::{remove_var, set_var}.

safest = [ # forbids `unsafe` even in dependencies (except the standard library)
	"safe",
]


#* Nightly features *#
# ------------------------------------------------------------------------------
# They are prefixed with `nightly_`.
#
# - https://doc.rust-lang.org/unstable-book/library-features.html

nightly = [ # sync with src/lib.rs & build/features.rs::NIGHTLY
	"nightly_autodiff", "nightly_coro", "nightly_doc", "nightly_float", "nightly_simd",
	"nightly_stable",
] # enables all the following features:
	# WAIT: [autodiff](https://github.com/rust-lang/rust/issues/124509)
	nightly_autodiff = [] # autodiff

	# WAIT: [coroutines](https://github.com/rust-lang/rust/issues/43122)
	nightly_coro= [] # coroutines, coroutine_trait, iter_from_coroutine

	# WAIT: [doc_cfg](https://github.com/rust-lang/rust/issues/43781)
	# WAIT: [doc_notable_trait](https://github.com/rust-lang/rust/issues/45040)
	nightly_doc = [] # DISABLED(doc_auto_cfg)

	# WAIT: [f16_and_f128](https://github.com/rust-lang/rust/issues/116909)
	nightly_float = ["bytemuck?/nightly_float"] # f16, f128

	# WAIT: [portable_simd](https://github.com/rust-lang/rust/issues/86656)
	nightly_simd = []

	# See: ./utils/release_dates.rs ; https://releases.rs/
	nightly_stable = [ # a selection of nightly features that will become stable soon:
		"nightly_stable_next1", "nightly_stable_next2", "nightly_stable_later"]
		nightly_stable_next1 = [] # 1.84
		nightly_stable_next2 = [] # 1.85 (+edition 2024)
		nightly_stable_later = [] # 1.?? stable soon enough

	##1.83 became stable on 2024-11-28:
	# 1.83: ✓[char::MIN](https://github.com/rust-lang/rust/pull/130154)
	# 1.83:  [const_cell_into_inner](https://github.com/rust-lang/rust/pull/130972)
	# 1.83: ✓[const_char_encode_utf8](https://github.com/rust-lang/rust/pull/131463)
	# 1.83:  [const_extern_fn](https://github.com/rust-lang/rust/pull/129753)
	# 1.83: ✓[const_float_bits_conv](https://github.com/rust-lang/rust/pull/129555)
	# 1.83: ✓[const_float_classify](https://github.com/rust-lang/rust/pull/130157)
	# 1.83: ✓[const_intrinsic_copy](https://github.com/rust-lang/rust/pull/130762)
	# 1.83: ✓[const_maybe_uninit_as_mut_ptr](https://github.com/rust-lang/rust/pull/130542)
	# 1.83: ✓[const_mut_refs|const_refs_to_cell](https://github.com/rust-lang/rust/pull/129195)
	# 1.83:  [const_refs_to_static](https://github.com/rust-lang/rust/pull/129759)
	# 1.83:  [const_result](https://github.com/rust-lang/rust/pull/131287)
	# 1.83: ✓[const_slice_from_raw_parts_mut](https://github.com/rust-lang/rust/pull/130403)
	# 1.83: ✓[const_slice_split_at_mut](https://github.com/rust-lang/rust/pull/130428)
	# 1.83:  [duration_consts_float](https://github.com/rust-lang/rust/pull/131289)
	# 1.83:  [entry_insert](https://github.com/rust-lang/rust/pull/130290)
	# 1.83: ✓[io_error_more](https://github.com/rust-lang/rust/pull/128316)
	# 1.83: ✓[r#ident](https://github.com/rust-lang/rust/pull/126452)
	# 1.83: ✓[rustdoc: table of contents](https://github.com/rust-lang/rust/pull/120736)
	# 1.83: ✓[waker_getters](https://github.com/rust-lang/rust/pull/129919)
	#
	##1.84 will be stable on 2024-01-09: (next1)
	# 1.84: ·[const_atomic_from_ptr](https://github.com/rust-lang/rust/pull/131717)
	# 1.84: ·[const_char_encode_utf16](https://github.com/rust-lang/rust/pull/132153)
	# 1.84: →[const_float_methods(unstable)](https://github.com/rust-lang/rust/pull/130568)
	# 1.84: ·[const_make_ascii](https://github.com/rust-lang/rust/pull/131496)
	# 1.84: ·[const_maybe_uninit_assume_init](https://github.com/rust-lang/rust/pull/131274)
	# 1.84: ·[const_option_ext](https://github.com/rust-lang/rust/pull/132966)
	# 1.84: ?[const_pin_2](https://github.com/rust-lang/rust/pull/131904)
	# 1.84: ·[const_ptr_is_null](https://github.com/rust-lang/rust/pull/133116)
	# 1.84: ·[const_unicode_case_lookup](https://github.com/rust-lang/rust/pull/132948)
	# 1.84: ?[Do not run lints that cannot emit](https://github.com/rust-lang/rust/pull/125116)
	# 1.84: ?[inline assembly s390x](https://github.com/rust-lang/rust/pull/131258)
	# 1.84: ?[inline assembly Arm64EC ](https://github.com/rust-lang/rust/pull/131781)
	# 1.84: ?[Ipv6Addr::is_(unicast_link|unique)_local](https://github.com/rust-lang/rust/pull/129238)
	# 1.84: ?[Provenance(Strict,Exposed)](https://github.com/rust-lang/rust/pull/130350)
	# 1.84: ·[pin_deref_mut](https://github.com/rust-lang/rust/pull/129424)
	# 1.84: ·[result_ffi_guarantees](https://github.com/rust-lang/rust/pull/130628)
	# 1.84: ?[wasm:multivalue,reference-types,tail-call](https://github.com/rust-lang/rust/pull/131080)
	#
	##1.85 will be stable on 2025-02-20: (next2)
	# 1.85: …[2024 edition](https://github.com/rust-lang/rust/issues/117258)
	# 1.85: ·[const_align_of_val](https://github.com/rust-lang/rust/pull/133762)
	#       · const_size_of_val
	# 1.85: ?[const_collections_with_hasher](https://github.com/rust-lang/rust/pull/133696)
	#       · build_hasher_default_const_new
	# 1.85: ·[const_float_methods](https://github.com/rust-lang/rust/issues/117258)
	# 1.85: ·[const_maybe_uninit_write](https://github.com/rust-lang/rust/pull/131713)
	# 1.85: ·[extended_varargs_abi_support](https://github.com/rust-lang/rust/pull/116161)
	# 1.85: ?[home_dir:fix&undeprecate](https://github.com/rust-lang/rust/pull/132515)
	# 1.85: ·[num_midpoint:unsigned,float](https://github.com/rust-lang/rust/pull/131784)
	# 1.85: ·[ptr_fn_addr_eq](https://github.com/rust-lang/rust/pull/133678)
	#
	##1.‥… (later)
	# 1.??: ·[asm_goto](https://github.com/rust-lang/rust/pull/133870)
	# 1.??: ·[async_closure](https://github.com/rust-lang/rust/pull/132706)
	# 1.??: ?[box_uninit_write](https://github.com/rust-lang/rust/issues/129397)
	# 1.??: ·[const_·array|slice·_from_ref](https://github.com/rust-lang/rust/issues/90206)
	# 1.??: x[derive_smart_pointer](https://github.com/rust-lang/rust/pull/133820)
	# 1.??: ·[do_not_recommend](https://github.com/rust-lang/rust/pull/132056)
	# 1.??: ·[impl_trait_in_assoc_type](https://github.com/rust-lang/rust/pull/120700)
	# 1.??: ·[isqrt](https://github.com/rust-lang/rust/pull/131391)
	# 1.??: ·[let_chains](https://github.com/rust-lang/rust/pull/132833)
	# 1.??: ·[macro_metavar_expr](https://github.com/rust-lang/rust/pull/122808)
	# 1.??: ?[new_zeroed_alloc](https://github.com/rust-lang/rust/issues/129396)
	# 1.??: ·[num_midpoint|const_num_midpoint](https://github.com/rust-lang/rust/pull/131784)
	# 1.??: ·[noop_waker](https://github.com/rust-lang/rust/issues/98286) work::async::waker
	# 1.??: ·[unbounded_shifts](https://github.com/rust-lang/rust/issues/129375)
	# 1.??: ·[unsafe_cell_from_mut](https://github.com/rust-lang/rust/pull/131261)
	#
	##.‥… much later
	# 1.?? [box_into_inner](https://github.com/rust-lang/rust/issues/80437)
	# 1.?? [cfg(accessible(::path::to::thing))](https://github.com/rust-lang/rust/issues/64797)
	# 1.?? [cfg(version(..))](https://github.com/rust-lang/rust/issues/64796)
	# 1.?? [const_cmp](https://github.com/rust-lang/rust/issues/92391) REMOVED
	# 1.?? [const_for](https://github.com/rust-lang/rust/issues/87575) depends on const_trait_impl
	# 1.?? [const_str_from_utf8](https://github.com/rust-lang/rust/issues/91006)
	# 1.?? [const_trait_impl](https://github.com/rust-lang/rust/issues/67792)
	# 1.?? [mpmc_channel](https://github.com/rust-lang/rust/pull/126839)
	# 1.?? [passing unstable flags only on nightly](https://github.com/rust-lang/cargo/issues/14733)
	#
	## Experimental features:
	# - [stmt_expr_attributes](https://github.com/rust-lang/rust/issues/15701)
	# - [offset_of_enum](https://github.com/rust-lang/rust/issues/120141)
	# - [ptr_metadata](https://github.com/rust-lang/rust/issues/81513)
	# - [type_alias_impl_trait|impl_trait_in_assoc_type](https://github.com/rust-lang/rust/issues/63063)
	#
	## Meta tracking issues:
	# - [arbitrary_self_types](https://github.com/rust-lang/rust/issues/44874)
	# - [cargo config search](https://github.com/rust-lang/cargo/issues/9769)
	# - [const fn](https://github.com/rust-lang/rust/issues/57563)
	# - [feature-metadata](https://github.com/rust-lang/cargo/issues/14157)
	# - [impl Trait](https://github.com/rust-lang/rust/issues/63066)
	# - [int_roundings](https://github.com/rust-lang/rust/issues/88581)
	# - [MaybeUninit methods for arrays](https://github.com/rust-lang/rust/issues/96097)
	# - [Reproducible Build bugs](https://github.com/rust-lang/rust/issues/129080)
	# - [unchecked_* on integers](https://github.com/rust-lang/rust/issues/85122)
	#
	## Rust project Goals:
	# - https://rust-lang.github.io/rust-project-goals/
	# - [const traits](https://github.com/rust-lang/rust-project-goals/issues/106)
	# - [expanded const generics](https://github.com/rust-lang/rust-project-goals/issues/100)
	# - [Linux building on stable](https://github.com/rust-lang/rust-project-goals/issues/116)
	# - [next generation trait solver](https://github.com/rust-lang/rust-project-goals/issues/113)
	# - [optimize clippy & linting](https://github.com/rust-lang/rust-project-goals/issues/114)
	# - [Rust 2024 Edition](https://github.com/rust-lang/rust-project-goals/issues/117)
	# - [stabilize cargo-script](https://github.com/rust-lang/rust-project-goals/issues/119)
	# - [stabilize doc_cfg](https://github.com/rust-lang/rust-project-goals/issues/120)


#* Capability features *#
# ------------------------------------------------------------------------------
# Most of these features are prefixed with an underscore (_) to be semi-hidden.
#
# Enabling them enables extra implementations which increases compilation times.
#
# They set automatic compile flags named `_*_·`, used for reflection.
# For example, `_stack_·` will be set if any _stack_* feature is enabled.

# default = [] # default capabilities

#* docs capabilities *#
# ---------------------

# The most complete versions of the documentation:
_docsrs = ["_docsrs_min", "_docs_max"]
_docsrs_min = ["_docsrs_nodep", "dep_all"]
_docsrs_nodep = ["_docsrs_stable_nodep", "nightly"]

_docsrs_stable = ["_docsrs_stable_min", "_docs_max"]
_docsrs_stable_min = ["_docsrs_stable_nodep", "dep_all"]
_docsrs_stable_nodep = ["std", "unsafe", "_docs_min"]

_docs_min = [ # the minimum capabilities to document each library item
	"all",
	"linux",
	# data:
	"_bit_u8",
	"_destaque_u8", "_stack_u8", "_graph_u8",
	"_tuple",
	# num:
	"_cmp_u8",
	"_float_f32", "_int_u8",
	# text:
	"_string_u8", "_string_nonul",
	"_char7", "_char8", "_char16", "_char24",
]
_docs_max = [ # the maximum capabities relevant for documentation
	"_data_all", "_num_all", "_text_all"] # _tuple_72

#* data capabilities *#
# ---------------------

_data_all = ["_bit_all", "_collections_all", "_tuple", "_sort_all"]

# `Bitwise`, `bitfield`, `enumset`:
_bit_all = [
	"_bit_i8", "_bit_i16", "_bit_i32", "_bit_i64", "_bit_i128", "_bit_isize",
	"_bit_u8", "_bit_u16", "_bit_u32", "_bit_u64", "_bit_u128", "_bit_usize"]
	_bit_i8 = []
	_bit_i16 = []
	_bit_i32 = []
	_bit_i64 = []
	_bit_i128 = []
	_bit_isize = []
	_bit_u8 = []
	_bit_u16 = []
	_bit_u32 = []
	_bit_u64 = []
	_bit_u128 = []
	_bit_usize = []

# `Destaque*`, `Graph*`, `Node*`, `Stack*`, `Tuple`:
_collections_all = [ "_destaque_all", "_graph_all", "_node_all", "_stack_all", "_tuple" ]
	_destaque_all = ["_destaque_u8", "_destaque_u16", "_destaque_u32", "_destaque_usize"]
		_destaque_u8 = []
		_destaque_u16 = []
		_destaque_u32 = []
		_destaque_usize = []
	_graph_all = ["_graph_u8", "_graph_u16", "_graph_u32", "_graph_usize"]
		_graph_u8 = ["_node_u8"]
		_graph_u16 = ["_node_u16"]
		_graph_u32 = ["_node_u32"]
		_graph_usize = ["_node_usize"]
	_node_all = ["_node_u8", "_node_u16", "_node_u32", "_node_usize"]
		_node_u8 = []
		_node_u16 = []
		_node_u32 = []
		_node_usize = []
	_stack_all = ["_stack_u8", "_stack_u16", "_stack_u32", "_stack_usize"]
		_stack_u8 = []
		_stack_u16 = []
		_stack_u32 = []
		_stack_usize = []

# `Tuple` trait and maximum arity supported (example relative compilation times)
_tuple = [] # arity 12    # time:  3.3s, codegen: 96K  (for >=2nd compilations)
_tuple_24 = ["_tuple"]    # time:  4.0s, codegen: 279K
_tuple_36 = ["_tuple_24"] # time:  4.6s, codegen: 561K
_tuple_48 = ["_tuple_36"] # time:  6.3s, codegen: 942K
_tuple_72 = ["_tuple_48"] # time: 10.3s, codegen: 2.0M

# `Sort`:
_sort_all = [
	"_sort_i8", "_sort_i16", "_sort_i32", "_sort_i64", "_sort_i128", "_sort_isize",
	"_sort_u8", "_sort_u16", "_sort_u32", "_sort_u64", "_sort_u128", "_sort_usize",
	"_sort_f32", "_sort_f64"]
	_sort_i8 = []
	_sort_i16 = []
	_sort_i32 = []
	_sort_i64 = []
	_sort_i128 = []
	_sort_isize = []
	_sort_u8 = []
	_sort_u16 = []
	_sort_u32 = []
	_sort_u64 = []
	_sort_u128 = []
	_sort_usize = []
	_sort_f32 = ["_cmp_f32"]
	_sort_f64 = ["_cmp_f64"]

#* num capabilities *#
# ---------------------

_num_all = ["_nums_all", "_cmp_all"]

# `Compare`:
_cmp_all = [
	"_cmp_i8", "_cmp_i16", "_cmp_i32", "_cmp_i64", "_cmp_i128", "_cmp_isize",
	"_cmp_u8", "_cmp_u16", "_cmp_u32", "_cmp_u64", "_cmp_u128", "_cmp_usize",
	"_cmp_f32", "_cmp_f64"]
	_cmp_i8 = []
	_cmp_i16 = []
	_cmp_i32 = []
	_cmp_i64 = []
	_cmp_i128 = []
	_cmp_isize = []
	_cmp_u8 = []
	_cmp_u16 = []
	_cmp_u32 = []
	_cmp_u64 = []
	_cmp_u128 = []
	_cmp_usize = []
	_cmp_f32 = ["_float_f32"]
	_cmp_f64 = ["_float_f64"]

# `[Num]Int`, `[Num]Float`, `[Num]Frac`, `Point`, `Angle`, `Vector`:
_nums_all = ["_float_all", "_int_all"]
	_float_all = ["_float_f32", "_float_f64"]
		_float_f32 = []
		_float_f64 = []
	_int_all = ["_int_iall", "_int_uall"]
		_int_iall = ["_int_i8", "_int_i16", "_int_i32", "_int_i64", "_int_i128", "_int_isize"]
			_int_i8 = []
			_int_i16 = []
			_int_i32 = []
			_int_i64 = []
			_int_i128 = []
			_int_isize = []
		_int_uall = ["_int_u8", "_int_u16", "_int_u32", "_int_u64", "_int_u128", "_int_usize"]
			_int_u8 = []
			_int_u16 = []
			_int_u32 = []
			_int_u64 = []
			_int_u128 = []
			_int_usize = []

#* text capabilities *#
# ---------------------

_text_all = ["_char_all", "_string_all"]

# char*
_char_all = ["_char7", "_char8", "_char16", "_char24"]
	_char7 = []
	_char8 = []
	_char16 = []
	_char24 = []

# StringU*, StringNonul:
_string_all = [
	"_string_u8", "_string_u16", "_string_u32", "_string_usize",
	"_string_nonul"]
	_string_u8 = []
	_string_u16 = []
	_string_u32 = []
	_string_usize = []
	#
	_string_nonul = []


#* Dependency features *#
# ------------------------------------------------------------------------------
# The names are prefixed with `dep_`, and don't have dashes.
# They are associated to optional dependencies and groups of modules.
#
# In sync with ./utils/check.rs::DEP_ALL & build/features.rs::DEPENDENCY
#
##Links
# - https://doc.rust-lang.org/edition-guide/rust-2024/cargo-remove-implicit-features.html

dep_all = [ # enables all 28 optional dependencies:
	"dep_atomic", "dep_bytemuck", "dep_const_str", "dep_crossterm", "dep_hashbrown",
	"dep_jiff", "dep_js_sys", "dep_libm", "dep_log", "dep_memchr", "dep_miniquad",
	"dep_nc", "dep_portable_atomic", "dep_pyo3", "dep_rand_core", "dep_rayon",
	"dep_raw_cpuid", "dep_regex_lite", "dep_rodio", "dep_rustix", "dep_stringzilla",
	"dep_sysinfo", "dep_tinyaudio", "dep_unicode_segmentation", "dep_unicode_width",
	"dep_wasm_bindgen", "dep_web_sys", "dep_wide",
] # enable groups of dependencies (unlocking extra functionality in certain modules):

dep_atomic = ["dep:atomic"]                                   # work::sync
dep_bytemuck = ["dep:bytemuck"]                               # *
dep_const_str = ["dep:const-str"]                             # text::str
dep_crossterm = ["dep:crossterm", "std"]                      # ui::backend
dep_hashbrown = ["dep:hashbrown", "alloc", "pyo3?/hashbrown"] # data::collections
dep_jiff = ["dep:jiff", "alloc"]                              # sys::time
dep_js_sys = ["dep:js-sys"]                                   # lang
dep_libm = ["dep:libm"]                                       # num::float
dep_log = ["dep:log"]                                         # sys::log
dep_memchr = ["dep:memchr"]                                   # text
dep_miniquad = ["dep:miniquad"]                               # sys::?
dep_nc = ["dep:nc"]                                           # sys::os
dep_portable_atomic = ["dep:portable-atomic"]                 # work::sync
dep_pyo3 = ["dep:pyo3", "std"]                                # lang
dep_rand_core = ["dep:rand_core"]                             # num::rand
dep_rayon = ["dep:rayon", "sysinfo?/multithread"]             # work::thread
dep_raw_cpuid = ["dep:raw-cpuid"]                             # sys::arch
dep_regex_lite = ["dep:regex-lite", "std"]                    # text::parse
dep_rodio = ["dep:rodio"]                                     # sys::sound
dep_rustix = ["dep:rustix"]                                   # sys::os
dep_stringzilla = ["dep:stringzilla"]                         # text
dep_sysinfo = ["dep:sysinfo", "std"]                          # sys
dep_tinyaudio = ["dep:tinyaudio"]                             # sys::sound
dep_unicode_segmentation = ["dep:unicode-segmentation"]       # text
dep_unicode_width = ["dep:unicode-width"]                     # text
dep_wasm_bindgen = ["dep:wasm-bindgen"]                       # lang
dep_web_sys = ["dep:web-sys"]                                 # sys::?
dep_wide = ["dep:wide"]                                       # *


[dependencies] # 27 (2 required, 25 optional)
# ==============================================================================
# https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
#
# Dependencies in each category (required, optional) are sorted alfabetically.
#
# Links to each crate's crates.io page are provided alongside the entries,
# as well as to the changelogs (✓), if available, or commit histories (✗).
#
# Crates using unsafe, even if transitively, are marked as so,
# preventing enabling them if the `safest` feature is enabled.
#
# When adding a new optional dependency:
# 1. Add a new entry below.
# 2. Update `dep_all` above.
# 3. Add a new entry in src/_deps.rs.
# 4. Update `DEPENDENCY` in build/features.rs.

#* required dependencies *#

[dependencies.devela_macros] # https://crates.io/crates/devela_macros
version  = "0.12.0" # ✓ https://github.com/andamira/devela_macros/blob/main/DOCS/CHANGELOG.md
# path = "./macros" # safe

[dependencies.paste_crate] # https://crates.io/crates/paste
version = "1.0.15" # ✗ https://github.com/dtolnay/paste/commits/master/
package = "paste" # safe, ARCHIVED

#* optional dependencies *#

[dependencies.atomic] # https://crates.io/crates/atomic
version = "0.6.0" # ✗ https://github.com/Amanieu/atomic-rs/commits/master/
optional = true # unsafe
default-features = false # 4 https://docs.rs/crate/atomic/latest/features
features = ["fallback"]

[dependencies.bytemuck] # https://crates.io/crates/bytemuck
version = "1.19.0" # ✓ https://github.com/Lokathor/bytemuck/blob/main/changelog.md
optional = true # unsafe
default-features = false # 21 https://docs.rs/crate/bytemuck/latest/features
features = ["alloc_uninit", "align_offset", "min_const_generics", "must_cast",
	"zeroable_maybe_uninit"]

[dependencies.const-str] # https://crates.io/crates/const-str
version = "0.5.7" # ✗ https://github.com/Nugine/const-str/commits/main/
optional = true # unsafe
default-features = false # 8 https://docs.rs/crate/const-str/latest/features

[dependencies.crossterm] # https://crates.io/crates/crossterm
version = "0.28.1" # ✓ https://github.com/crossterm-rs/crossterm/blob/master/CHANGELOG.md
optional = true # unsafe
default-features = false # 9 https://docs.rs/crate/crossterm/latest/features
features = ["bracketed-paste", "events"]

[dependencies.hashbrown] # https://crates.io/crates/hashbrown
version = "0.15.1" # ✓ https://github.com/rust-lang/hashbrown/blob/master/CHANGELOG.md
optional = true # unsafe
default-features = false # 14 https://docs.rs/crate/hashbrown/latest/features
features = ["default-hasher", "inline-more"]

[dependencies.jiff] # https://crates.io/crates/jiff
version = "0.1.15" # https://github.com/BurntSushi/jiff/blob/master/CHANGELOG.md
optional = true # safe ± (few & checked)
default-features = false # 10 https://docs.rs/crate/jiff/latest/features
# features = [""] # https://docs.rs/jiff/0.1.14/jiff/#crate-features

[dependencies.js-sys] # https://crates.io/crates/js-sys
version = "0.3.74" # ✗ https://github.com/rustwasm/wasm-bindgen/commits/main/crates/js-sys
optional = true # unsafe
default-features = false # 2 https://docs.rs/crate/js-sys/latest/features
# deps: once-cell, wasm-bindgen/std

[dependencies.libm] # https://crates.io/crates/libm
version = "0.2.11" # ✓ https://github.com/rust-lang/libm/blob/master/CHANGELOG.md
optional = true # unsafe
default-features = false # 3 https://docs.rs/crate/libm/latest/features

[dependencies.log] # https://crates.io/crates/log
version = "0.4.22" # ✓ https://github.com/rust-lang/log/blob/master/CHANGELOG.md
optional = true # safe (optional unsafe)
default-features = false # 25 https://docs.rs/crate/log/latest/features
# features = ["kv"]

[dependencies.memchr] # https://crates.io/crates/memchr
version = "2.7.4" # ✗ https://github.com/BurntSushi/memchr/commits/master/
optional = true # unsafe
default-features = false # 9 https://docs.rs/crate/memchr/latest/features

[dependencies.miniquad] # https://crates.io/crates/miniquad
version = "0.4.7" # ✗ https://github.com/not-fl3/miniquad/commits/master/
optional = true # unsafe
default-features = false # 1 https://docs.rs/crate/miniquad/latest/features

[dependencies.nc] # https://crates.io/crates/nc
version = "0.9.5" # ✗ https://github.com/XuShaohua/nc/commits/main/
optional = true # unsafe
default-features = false # 2 https://docs.rs/crate/nc/latest/features
# WAIT: [rt_sigaction](https://github.com/XuShaohua/nc/issues/29)

[dependencies.portable-atomic] # https://crates.io/crates/portable-atomic
version = "1.10.0" # ✓ https://github.com/taiki-e/portable-atomic/blob/main/CHANGELOG.md
optional = true # unsafe
default-features = false # 11 https://docs.rs/crate/portable-atomic/latest/features
features = ["fallback", "float"]

[dependencies.pyo3] # https://crates.io/crates/pyo3
version = "0.23.3" # ✓ https://github.com/PyO3/pyo3/blob/main/CHANGELOG.md
optional = true  # unsafe
default-features = false # 35 https://docs.rs/crate/pyo3/latest/features
features = [] # https://docs.rs/pyo3/latest/pyo3/#feature-flags
# https://pyo3.rs/latest/features.html#features-reference
# WAIT [no_std](https://github.com/PyO3/pyo3/issues/3510)

[dependencies.rand_core] # https://crates.io/crates/rand_core
version = "0.6.4" # ✓ https://github.com/rust-random/rand/blob/master/rand_core/CHANGELOG.md
optional = true # safe
default-features = false # 5 https://docs.rs/crate/rand_core/latest/features

[dependencies.rayon] # https://crates.io/crates/rayon
version = "1.10.0" # ✗ https://github.com/rayon-rs/rayon/commits/main/
optional = true # unsafe
default-features = false # 1 https://docs.rs/crate/rayon/latest/features

[dependencies.raw-cpuid] # https://crates.io/crates/raw-cpuid
version = "11.2.0" # ✓ https://github.com/gz/rust-cpuid/blob/master/CHANGELOG.md
optional = true # unsafe
default-features = false # 9 https://docs.rs/crate/raw-cpuid/latest/features

[dependencies.regex-lite] # https://crates.io/crates/regex-lite
version = "0.1.6" # ✗ https://github.com/rust-lang/regex/commits/master/regex-lite
optional = true # safe
default-features = false # 2 https://docs.rs/crate/rayon/latest/features
features = ["string"]
# WAIT: [no_std](https://github.com/rust-lang/regex/issues/1122)

[dependencies.rodio] # https://crates.io/crates/rodio
version = "0.20.1" # ✓ https://github.com/RustAudio/rodio/blob/master/CHANGELOG.md
optional = true # unsafe (unsafe dependencies)
default-features = false # 26 https://docs.rs/crate/rodio/latest/features
# features = ["claxon", "flac", "hound", "lewton", "mp3", "vorbis", "wav"] # IMPROVE: feature-gate

[dependencies.rustix] # https://crates.io/crates/rustix
version = "0.38.41" # ✓ https://github.com/bytecodealliance/rustix/releases
optional = true # unsafe
default-features = false # 39 https://docs.rs/crate/rustix/latest/features
features = [ # IMPROVE: feature-gate
    "event", "fs", "io_uring", "mm", "mount", "net", "param", "pipe", "process",
    "procfs", "pty", "rand", "runtime", "shm", "stdio", "system", "termios",
    "thread", "time",
]

[dependencies.stringzilla] # https://crates.io/crates/stringzilla
version = "3.11.0" # ✗ https://github.com/ashvardanian/StringZilla/releases
optional = true  # unsafe
default-features = false # 0 https://docs.rs/crate/stringzilla/latest/features
# WAIT [fix msvc cross-compile](https://github.com/ashvardanian/StringZilla/pull/169)
# WAIT [fix cmake code](https://github.com/ashvardanian/StringZilla/pull/85)

[dependencies.sysinfo] # https://crates.io/crates/sysinfo
version = "0.33.0" # ✓ https://github.com/GuillaumeGomez/sysinfo/blob/master/CHANGELOG.md
optional = true # unsafe
default-features = false # 16 https://docs.rs/crate/sysinfo/latest/features
features = ["component", "disk", "network", "system", "user"] # IMPROVE: feature-gate

[dependencies.tinyaudio] # https://crates.io/crates/tinyaudio
version = "1.0.0" # ✓ https://github.com/mrDIMAS/tinyaudio/blob/main/CHANGELOG.md
optional = true # unsafe
default-features = false # 0 https://docs.rs/crate/tinyaudio/latest/features

[dependencies.unicode-segmentation] # https://crates.io/crates/unicode-segmentation
version = "1.12.0" # ✓ https://github.com/unicode-rs/unicode-segmentation?tab=readme-ov-file#change-log
optional = true # safe
default-features = false # 1 https://docs.rs/crate/unicode-segmentation/latest/features

[dependencies.unicode-width] # https://crates.io/crates/unicode-width
version = "0.2.0" # ✓ https://github.com/unicode-rs/unicode-width?tab=readme-ov-file#changelog
optional = true # safe
default-features = false # 7 https://docs.rs/crate/unicode-width/latest/features
# features = ["cjk"]

[dependencies.wasm-bindgen] # https://crates.io/crates/wasm-bindgen
version = "0.2.97" # ✓ https://github.com/rustwasm/wasm-bindgen/blob/main/CHANGELOG.md
optional = true # unsafe
default-features = false # 10 https://docs.rs/crate/wasm-bindgen/latest/features

[dependencies.web-sys] # https://crates.io/crates/web-sys
version = "0.3.74" # ✗ https://github.com/rustwasm/wasm-bindgen/commits/main/crates/web-sys
optional = true # unsafe (unsafe dependencies)
default-features = false # 1657 https://docs.rs/crate/web-sys/latest/features

[dependencies.wide] # https://crates.io/crates/wide
version = "0.7.26" # ✗ https://github.com/Lokathor/wide/commits/main/
optional = true # unsafe
default-features = false # 3 https://docs.rs/crate/wide/latest/features


[dev-dependencies]
# Used for benchmarks, examples and tests. They inherit from [dependencies].
# ------------------------------------------------------------------------------

devela = { path = ".", features = ["all"] }


[build-dependencies]
# Used for the build scripts. They do not inherit from [dependencies].
# ------------------------------------------------------------------------------


# patches
# ==============================================================================
# https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#the-patch-section

[patch.crates-io]
devela = { path = './' }


# profiles
# ==============================================================================

# [profile.dev]
# codegen-backend = "cranelift"

# [profile.dev.package."*"]
# codegen-backend = "llvm"
# opt-level = 3


[package.metadata.docs.rs]
# ==============================================================================
# https://docs.rs/about/metadata

no-default-features = true
features = ["_docsrs"]
default-target = "x86_64-unknown-linux-gnu"
rustdoc-args = [
	"--generate-link-to-definition",
	"--html-in-header", "./DOCS/rustdoc-header.html"
]


[badges]
# ==============================================================================
maintenance = { status = "experimental" }


# lints
# ==============================================================================
# https://doc.rust-lang.org/cargo/reference/manifest.html#the-lints-section

[lints.rust]
# https://doc.rust-lang.org/stable/nightly-rustc/rustc_lint/builtin/index.html#constants
# ------------------------------------------------------------------------------
# WAIT: [lazy_type_alias](https://github.com/rust-lang/rust/issues/112792)
type_alias_bounds = "deny" # detects bounds in type aliases
unsafe_op_in_unsafe_fn = "deny" # unsafe use inside unsafe fn without unsafe block

missing_docs = "warn" # missing docs for public items

stable_features = "allow" # a feature attribute that has since been made stable
unknown_lints = "allow" # unrecognized lint attributes

[lints.rustdoc]
# https://doc.rust-lang.org/rustdoc/lints.html
# ------------------------------------------------------------------------------

missing_crate_level_docs = "deny" # no documentation at the crate root

# broken_intra_doc_links = "allow" # NOTE: conditionally allowed in lib.rs
redundant_explicit_links = "allow" # (primitive aliases (char) need the explicit reference)

[lints.clippy]
# https://rust-lang.github.io/rust-clippy/master/index.html
# ------------------------------------------------------------------------------
enum_glob_use = "deny" # `use Enum::*`
missing_safety_doc = "deny" # no `# Safety` section in public unsafe fns

all = { level = "warn", priority = -1 } # (the default set of clippy lints)
# a selection from pedantic:
bool_to_int_with_if = "warn" # using an if statement to convert a bool to an int
cloned_instead_of_copied = "warn" # usage of cloned() where copied() could be used
default_union_representation = "warn" # union declared without #[repr(C)]
empty_structs_with_brackets = "warn" # structs without fields, with brackets
if_then_some_else_none = "warn" # if-else that could be written using bool::then[_some]
ignored_unit_patterns = "warn" # Checks for usage of _ in patterns of type ()
float_cmp = "warn" # (in-)equality comparisons on floating-point values
float_cmp_const = "warn" # (in-)equality comparisons on const floating-point values
manual_let_else = "warn" # cases where let...else could be used
manual_string_new = "warn" # usage of "" to create a String
map_unwrap_or = "warn" # usage of result|option.map(_).unwrap_or[_else](_)
ptr_cast_constness = "warn" # as casts between raw pointers that change their constness
same_functions_in_if_condition = "warn" # consecutive ifs with the same function call
semicolon_if_nothing_returned = "warn" # expr returns () but it's not followed by ;
single_match_else = "warn" # 2 arms in match where an if let else will usually suffice
trivially_copy_pass_by_ref = "warn" # fns with ref args that could be passed by value
unnested_or_patterns = "warn" # unnested or-patterns, (Some(a)|Some(b) vs Some(a|b))
unreadable_literal = "warn" #  long integral or float does not contain underscores
# NOTE: not compatible with the iif! macro w/o being able to ignore it in an expr:
# WAIT: [stmt_expr_attributes](https://github.com/rust-lang/rust/issues/15701)
# redundant_else = "warn" // else blocks that can be removed without changing semantics

empty_docs = "allow" # empty documentation
doc_lazy_continuation = "allow" # markdown lazy paragraph continuations
mixed_attributes_style = "allow" # items with mixed (inner/outer) attributes
module_inception = "allow" # modules with the same name as its parent
too_long_first_doc_paragraph = "allow" # reason: root modules doc_extends!
wrong_self_convention = "allow" # `is_` methods having an owned self

[lints.rust.unexpected_cfgs]
# https://dev-doc.rust-lang.org/nightly/unstable-book/compiler-flags/check-cfg.html
# https://doc.rust-lang.org/rustc/check-cfg.html
# ------------------------------------------------------------------------------
level = "warn"
check-cfg = [ # Allowed config flags:
	# Defined if the library is compiled as the primary package (not a dependency).
	'cfg(cargo_primary_package)',
	#
	# Allows excluding tests from being run, more concisely:
	'cfg(__no_test)',
	#
	# Expect more pointer widths.
	'cfg(target_pointer_width, values("8", "128"))',
	#
	# Compilation flags for reflection are enabled in: "/build/features.rs"
	# ---------------------------------------------------------------------
	"cfg(_nightly_·, _dep_·)",
	# data:
	'cfg(_bit_·, _destaque_·, _stack_·)',
	'cfg(_graph_·, _node_·)',
	# media:
	'cfg(_media_·)',
	# num:
	'cfg(_num_·)',
	'cfg(_sort_·, _sort_int_·, _sort_float_·)',
	'cfg(_nums_·, _cmp_·, _float_·, _int_·, _int_i·, _int_u·)',
	'cfg(_non_value_·, _non_value_i_·, _non_value_u_·)',
	# sys
	'cfg(_sys_·, _mem_·)',
	# text:
	'cfg(_char·, _string_·, _string_u·)',
	# sys
	'cfg(_ui_·)',
]


# [[bench]]
# ==============================================================================


# examples
# ==============================================================================

[[example]]
name = "bitfield"
required-features = ["_bit_u8"]
[[example]]
name = "cargo_script"
required-features = ["__no_test"]
[[example]]
name = "coro_run"
required-features = ["unsafe_async", "alloc"]
[[example]]
name = "enumset"
required-features = ["_bit_u8"]
[[example]]
name = "id_pin"
required-features = [] # optional: "alloc"
[[example]]
name = "id_seq"
required-features = []
[[example]]
name = "linux"
required-features = ["linux", "unsafe_syscall"]
