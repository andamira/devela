[workspace]

members = [".", "macros"]


[package]

name = "devela"
description = "A cohesive Rust development layer."
version = "0.21.0-wip"
edition = "2021"
rust-version = "1.76.0" # sync with readme & .github/*/check.yml
authors = ["José Luis Cruz <joseluis@andamira.net>"]
repository = "https://github.com/andamira/devela"
documentation = "https://docs.rs/devela"
license = "MIT OR Apache-2.0"
include = [
	"/Cargo.toml",
	"/DOCS/*.md",
	"/src/**/*.rs", "/src/**/*.md", "src/**/*.html",
	"/examples/bitfield.rs", "/examples/enumset.rs",
	"/examples/cargo_script.rs", "/examples/coro_run.rs",
]
categories = ["development-tools", "rust-patterns", "no-std::no-alloc"]
keywords = ["dev", "helper", "library", "std", "extension"]
publish = true


# ------------------------------------------------------------------------------
# Features are grouped in the following categories:
# - Miscellaneous
# - Environment
# - Module
# - Safety
# - Nightly
# - Capability
# - Dependency

[features]

#* miscellaneous features *#

# default = [] # no default features

_exclude_example = [] # from testing

# enables the most complete versions of the documentation:
_docsrs = ["nightly", "all", "std", "unsafe", "dep_all"]
_docsrs_max = ["nightly", "all", "std", "unsafe", "dep_all", "capability_max"]
_docsrs_stable = ["all", "std", "unsafe", "dep_all"]


#* environment features *#

std = [ # disables `no_std` compatibility and enables `std` functionality
	"alloc", "either/use_std",
	"atomic?/std", "bytemuck/extern_crate_std", "memchr?/std", "rand_core?/std",
	"wide?/std",
]
alloc = [ # enables `alloc` functionality
	"bytemuck/extern_crate_alloc", "memchr?/alloc", "rand_core?/alloc"
]
no_std = [ # enables functionality incompatible with or substitute of `std`
]


#* module features *#

all = [ # enables all the modules and submodules
	"code",
	"data",
	"fig",
	"gfx",
	"io",
	"mem",
	"num",
	"os",
	"result",
	"text",
	"time",
	"ui",
	"work",
	]

# individual modules
code = []
data = []
fig = []
gfx = []
io = []
mem = []
num = [ # enables all the `num` sub-features
	"num_int", "num_niche_impls", "num_niche_range"
	]
	num_int = [] # Int, NumInt, NumRefInt, Frac
	num_niche_impls = [] # extra implementations for niche types
	num_niche_range = [] # Range and NonRange niche types
os = []
result = []
text = []
time = []
ui = [ # enables all the `ui` sub-features
	 "ui_events", "ui_term",
	]
	ui_events = ["crossterm?/events"] # support for events
	ui_term = [] # terminal functionality
	# ui_window = ["miniquad"]
work = ["bytemuck/zeroable_atomics"]


#* safety features *#

# To use unsafe functionality:
# 1. enable the desired `unsafe` feature.
# 2. don't enable the `safe` feature for that module.

safe = [ # forbids `unsafe` (and overrides unsafe features)
	"safe_code", "safe_data", "safe_fig", "safe_gfx", "safe_io", "safe_mem",
	"safe_num", "safe_os", "safe_result", "safe_text", "safe_time", "safe_ui",
	"safe_work",
] # in specific modules:
	safe_code = []
	safe_data = []
	safe_fig = []
	safe_gfx = []
	safe_io = []
	safe_mem = []
	safe_num = []
	safe_os = []
	safe_result = []
	safe_text = []
	safe_time = []
	safe_ui = ["safe_ui_term"]
		safe_ui_term = []
		# safe_ui_window = []
	safe_work = []

unsafe = [ # enables `unsafe` (as long as it isn't forbidden in the module)
	"unsafe_array", "unsafe_async", "unsafe_const", "unsafe_dyn",
	"unsafe_niche", "unsafe_ptr", "unsafe_slice", "unsafe_str",
] # for specific purposes:
	unsafe_array = [] # faster array initialization, UninitArray.
	unsafe_async = [] # TaskWakerNoop, CoroRun
	unsafe_const = [] # extra const methods.
	unsafe_dyn = [] # DSTs in the stack, no_std Error dyn impls.
	unsafe_niche = [] # unchecked niche constructors.
	unsafe_ptr = [] # pop methods without Clone.
	unsafe_slice = [] # extra slice methods, avoid bound checks.
	unsafe_str = [] # unchecked utf-8 char and &str conversions.


#* nightly features *#

nightly = [ # enables all the unstable features
	"nightly_coro", "nightly_doc", "nightly_simd",
] # specific unstable features:
	nightly_coro= [] # coroutines, coroutine_trait, iter_from_coroutine
	nightly_doc = [] # doc_cfg
	nightly_simd = [] # portable_simd


#* capability features *#

# Enabling extra capabilites can worsen compilation times.
# Some relative compilation times are provided as a guide.

capability_max = [ # enables the maximum capabilities
	"_tuple_arity_127",
]

# The maximum tuple arity supported by ExtTuple:
# By default tuple arity is 15         # compile  4.9s
_tuple_arity_31 = []                   # compile  5.3s
_tuple_arity_63 = ["_tuple_arity_31"]  # compile  7.5s
_tuple_arity_95 = ["_tuple_arity_63"]  # compile 10.5s
_tuple_arity_127 = ["_tuple_arity_95"] # compile 14.9s

# IDEA MAYBE custom Debug with a dynamic limit on the number of elements
# TODO MAYBE
# The maximum number of elements to Display or Debug for data collections. E.g.
# for Array, Array2d, Stack, Destaque, Vector, Matrix…
# The default length is unlimited
_fmt_len_16 = []
_fmt_len_32 = ["_fmt_len_16"]
_fmt_len_64 = ["_fmt_len_32"]
_fmt_len_128 = ["_fmt_len_64"]


#* dependency features *#

dep_all = [ # enables all optional dependencies
	"atomic",
	"const-str",
	"crossterm",
	"hashbrown",
	"libm",
	"memchr",
	"miniquad",
	"portable-atomic",
	"rand_core",
	"unicode-segmentation",
	"unicode-width",
	"wide",
] # enable groups of dependencies:
	dep_text = ["const-str", "memchr", "unicode-segmentation", "unicode-width"]
	dep_ui_term = ["const-str", "crossterm"]
	dep_work = ["atomic", "portable-atomic"]

atomic = ["dep:atomic"]
const-str = ["dep:const-str"]
crossterm = ["dep:crossterm"]
hashbrown = ["dep:hashbrown"]
libm = ["dep:libm"]
memchr = ["dep:memchr"]
miniquad = ["dep:miniquad"] # std
portable-atomic = ["dep:portable-atomic"]
rand_core = ["dep:rand_core"]
unicode-segmentation = ["dep:unicode-segmentation"]
unicode-width = ["dep:unicode-width"]
wide = ["dep:wide"]


# ------------------------------------------------------------------------------

[dependencies]

devela_macros = { version  = "0.9.0" }
#devela_macros = { path = "./macros" }
either = { version = "1.9.0", default-features = false }
paste_crate = { package = "paste", version = "1.0.14", default-features = false }

# optional dependencies
const-str = { version = "0.5.6", default-features = false, optional = true }
libm = { version = "0.2.8", default-features = false, optional = true }
memchr = { version = "2.7.1", optional = true, default-features = false }
miniquad = { version = "0.4.0", default-features = false, optional = true }
rand_core = { version = "0.6.4", default-features = false, optional = true }
unicode-segmentation = { version = "1.10.1", default-features = false, optional = true }
unicode-width = { version = "0.1.11", default-features = false, optional = true }
wide = { version = "0.7.15", optional = true, default-features = false }
[dependencies.atomic]
version = "0.6.0"
optional = true
default-features = false
features = ["fallback"]
[dependencies.bytemuck]
version = "1.14.0"
default-features = false
features = ["align_offset", "min_const_generics", "must_cast", "zeroable_maybe_uninit"]
[dependencies.crossterm]
version = "0.27.0"
optional = true
default-features = false
features = ["windows"]
[dependencies.hashbrown]
version = "0.14.1"
optional = true
default-features = false
features = ["ahash", "inline-more"]
[dependencies.portable-atomic]
version = "1.4.3"
optional = true
default-features = false
features = ["fallback", "float"]


# ------------------------------------------------------------------------------

[dev-dependencies]

devela = { path = ".", features = ["all"] }


# ------------------------------------------------------------------------------

[package.metadata.docs.rs]
no-default-features = true
features = ["_docsrs_max"]
rustdoc-args = [ "--html-in-header", "./src/_docs/rustdoc-header.html" ]

[badges]
maintenance = { status = "experimental" }


# ------------------------------------------------------------------------------
# examples

# included examples
[[example]]
name = "bitfield"
[[example]]
name = "coro_run"
required-features = ["unsafe_async", "alloc"]
[[example]]
name = "enumset"

# excluded examples
[[example]]
name = "cargo_script"
required-features = ["_exclude_example"]
