# https://doc.rust-lang.org/cargo/reference/config.html
#
# WAIT: [build.warnings](https://github.com/rust-lang/cargo/issues/14802)
# WAIT: [config-include](https://github.com/rust-lang/cargo/issues/7723)
# WAIT: [multiple cargo config files](https://github.com/rust-lang/cargo/issues/9306)
# WAIT: [pass config in nested aliases](https://github.com/rust-lang/cargo/issues/13822)
# WAIT: [pass unstable flags only on nightly](https://github.com/rust-lang/cargo/issues/14733)
# WAIT: [jump to definition](https://github.com/rust-lang/rust/issues/89095)


# NOTE: this is a temporary fix to be able to pass unstable flags only in nightly
# ------------------------------------------------------------------------------
include = "nightly.toml"


[unstable]
# ==============================================================================
# These features correspond to the -Z command-line flags.
# https://doc.rust-lang.org/cargo/reference/unstable.html

codegen-backend = true #codegen-backend
config-include = true  #config-include
unstable-options = true
# mtime-on-use = true


[build]
# ==============================================================================

rustdocflags = [
	# WAIT: https://github.com/rust-lang/cargo/issues/331#issuecomment-1081704033
	"--html-in-header", "./DOCS/rustdoc-header.html",
]


[alias]
# ==============================================================================

# CHECK
c = "check"
cb = "check --bin"
ce = "check --example"
cr = "check --release"
cu = "check -F=std"
cn = "check -F=no_std,safe"
cnu = "check -F=unsafe"

# CLIPPY
cl = "clippy"
clb = "clippy --bin"
cle = "clippy --example"
clr = "clippy --release"
clu = "clippy -F=std,unsafe"
cln = "clippy -F=no_std"
clnu = "clippy -F=no_std,unsafe"

# BUILD
b = "build"
bb = "build --bin"
be = "build --example"
br = "build --release"
brb = "build --release --bin"
bre = "build --release --example"
bu = "build -F=std,unsafe"
bn = "build -F=no_std"
bnu = "build -F=no_std,unsafe"

# RUN
r = "run"
rb = "run --bin"
re = "run --example"
#
rr = "run --release"
rrb = "run --release --bin"
rre = "run --release --example"
rrue = "run --release -F unsafe --example"
#
rrs = "run --release -F std"
rrsb = "run --release -F std --bin"
rrse = "run --release -F std --example"
rrsue = "run --release -F std,unsafe --example"
#
ru = "run -F=unsafe"
rub = "run -F=unsafe --bin"
rue = "run -F=unsafe --example"
#
rsu = "run -F=std,unsafe"
rsub = "run -F=std,unsafe --bin"
rsue = "run -F=std,unsafe --example"
#
rn = "run -F=no_std"
rnb = "run -F=no_std --bin"
rne = "run -F=no_std --example"
rnu = "run -F=no_std,unsafe"

# TEST
t = "test"
tl = "test --lib"
tl_ = "test --lib -- --nocapture"
tl_1 = "test --lib -- --test-threads 1 --nocapture"
td = "test --doc"

# MIRI
m = "miri test"
mu = "miri test -F=std,unsafe"
mn = "miri test -F=no_std"
mnu = "miri test -F=no_std,unsafe"

# PUBLISH
p = "publish --dry-run"
pa = "publish --dry-run --allow-dirty"
PUBLISH = "publish"
PUBLISHa = "publish --allow-dirty"

# CLEAN PACKAGE
Cp = "clean --package"
Crp = "clean --release --package"

# DOC
d = "doc --no-deps"
do = "doc --no-deps --open"
dp = "doc --no-deps --document-private-items"
dpo = "doc --no-deps --open --document-private-items"
# +nightly
nd = "doc --no-deps -F=nightly_doc"
ndp = "doc --no-deps -F=nightly_doc --document-private-items"
#
ndo = "doc --open --no-deps -F=nightly_doc"
ndpo = "doc --open --no-deps -F=nightly_doc --document-private-items"

# TREE
tr = "tree"
trf = "tree --format {p}:{f}" # with feature list
trr = "tree --format {p}:{r}" # with repository url

#/ cargo subcommands: /#
# ------------------------------------------------------------------------------

# https://crates.io/crates/cargo-llvm-lines
# https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#symbol-mangling-version
L = "llvm-lines --profile dev -- -Csymbol-mangling-version=v0"
Lo = "llvm-lines --profile dev-lto -- -Csymbol-mangling-version=v0"
Lr = "llvm-lines --profile release -- -Csymbol-mangling-version=v0"
Lro = "llvm-lines --profile release-lto -- -Csymbol-mangling-version=v0"
# sort by copies:
L_c = "llvm-lines -s copies --profile dev -- -Csymbol-mangling-version=v0"
Lo_c = "llvm-lines -s copies --profile dev-lto -- -Csymbol-mangling-version=v0"
Lr_c = "llvm-lines -s copies --profile release -- -Csymbol-mangling-version=v0"
Lro_c = "llvm-lines -s copies --profile release-lto -- -Csymbol-mangling-version=v0"

# https://crates.io/crates/cargo-expand
E = "expand"
Eb = "expand --bin"
Ee = "expand --example"
El = "expand --lib"

# https://crates.io/crates/cargo-show-asm
# Has to be run from the root of the crate.
# Functions need not to be inlined. Defaults to release mode.
A = "asm --simplify -p devela"
Ar = "asm --simplify --rust -p devela" # print interleaved rust code
# std targets:
A_win64        = "A  --target x86_64-pc-windows-msvc"
Ar_win64       = "Ar --target x86_64-pc-windows-msvc"
A_mac64        = "A  --target x86_64-apple-darwin"
Ar_mac64       = "Ar --target x86_64-apple-darwin"
A_lin64        = "A  --target x86_64-unknown-linux-gnu"
Ar_lin64       = "Ar --target x86_64-unknown-linux-gnu"
A_lin32        = "A  --target i686-unknown-linux-gnu"
Ar_lin32       = "Ar --target i686-unknown-linux-gnu"
A_lin_riscv64  = "A  --target riscv64gc-unknown-linux-gnu"
Ar_lin_riscv64 = "Ar --target riscv64gc-unknown-linux-gnu"
A_lin_arm64    = "A  --target aarch64-unknown-linux-gnu"
Ar_lin_arm64   = "Ar --target aarch64-unknown-linux-gnu"
# no_std targets:
A_64       = "A  --target x86_64-unknown-none"
Ar_64      = "Ar --target x86_64-unknown-none"
A_arm64    = "A  --target aarch64-unknown-none"
Ar_arm64   = "Ar --target aarch64-unknown-none"
A_arm32    = "A  --target thumbv7m-none-eabi"
Ar_arm32   = "Ar --target thumbv7m-none-eabi"
A_riscv64  = "A  --target thumbv7m-none-eabi"
Ar_riscv64 = "Ar --target thumbv7m-none-eabi"
A_wasi32   = "A  --target wasm32-wasip1"
Ar_wasi32  = "Ar --target wasm32-wasip1"
A_wasm32   = "A  --target wasm32-unknown-unknown"
Ar_wasm32  = "Ar --target wasm32-unknown-unknown"

# https://crates.io/crates/cargo-supply-chain
S = "supply-chain"
Sc = "supply-chain crates"
Sp = "supply-chain publishers"
Su = "supply-chain update"
