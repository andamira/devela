# https://doc.rust-lang.org/cargo/reference/config.html
#
# WAIT: [build.warnings](https://github.com/rust-lang/cargo/issues/14802)
# WAIT: [config-include](https://github.com/rust-lang/cargo/issues/7723)
# WAIT: [multiple cargo config files](https://github.com/rust-lang/cargo/issues/9306)
# WAIT: [pass config in nested aliases](https://github.com/rust-lang/cargo/issues/13822)
# WAIT: [pass unstable flags only on nightly](https://github.com/rust-lang/cargo/issues/14733)
# WAIT: [jump to definition](https://github.com/rust-lang/rust/issues/89095)


# NOTE: this is a temporary fix to be able to pass unstable flags only in nightly
# ------------------------------------------------------------------------------
include = "nightly.toml"


[unstable]
# ==============================================================================
# These features correspond to the -Z command-line flags.
# https://doc.rust-lang.org/cargo/reference/unstable.html

codegen-backend = true #codegen-backend
config-include = true  #config-include
unstable-options = true
# mtime-on-use = true


[build]
# ==============================================================================

# In sync with .cargo/nightly.toml & utils/cargo-native
rustdocflags = [
	# WAIT: https://github.com/rust-lang/cargo/issues/331#issuecomment-1081704033
	"--html-in-header", "./config/rustdoc-header.html",
	# "-Ctarget-cpu=native", # see instead: ../utils/cargo-native
]
rustflags = [
	# "-Ctarget-cpu=native", # see instead: ../utils/cargo-native
]


[alias]
# ==============================================================================

# CHECK
c = "check"
cb = "check --bin"
ce = "check --example"
cr = "check --release"
cu = "check -F=std"
cn = "check -F=no_std,safe"
cnu = "check -F=unsafe"

# CLIPPY
cl = "clippy"
clb = "clippy --bin"
cle = "clippy --example"
clr = "clippy --release"
clu = "clippy -F=std,unsafe"
cln = "clippy -F=no_std"
clnu = "clippy -F=no_std,unsafe"

# BUILD
b = "build"
bb = "build --bin"
be = "build --example"
br = "build --release"
brb = "build --release --bin"
bre = "build --release --example"
bu = "build -F=std,unsafe"
bn = "build -F=no_std"
bnu = "build -F=no_std,unsafe"

# RUN
r = "run"
rb = "run --bin"
re = "run --example"
#
rr = "run --release"
rrb = "run --release --bin"
rre = "run --release --example"
rrue = "run --release -F unsafe --example"
#
rrs = "run --release -F std"
rrsb = "run --release -F std --bin"
rrse = "run --release -F std --example"
rrsue = "run --release -F std,unsafe --example"
#
ru = "run -F=unsafe"
rub = "run -F=unsafe --bin"
rue = "run -F=unsafe --example"
#
rsu = "run -F=std,unsafe"
rsub = "run -F=std,unsafe --bin"
rsue = "run -F=std,unsafe --example"
#
rn = "run -F=no_std"
rnb = "run -F=no_std --bin"
rne = "run -F=no_std --example"
rnu = "run -F=no_std,unsafe"

# TEST
t = "test"
tl = "test --lib"
tl_ = "test --lib -- --nocapture"
tl_1 = "test --lib -- --test-threads 1 --nocapture"
td = "test --doc"

# MIRI
m = "miri test"
mu = "miri test -F=std,unsafe"
mn = "miri test -F=no_std"
mnu = "miri test -F=no_std,unsafe"

# PUBLISH
p = "publish --dry-run"
pa = "publish --dry-run --allow-dirty"
PUBLISH = "publish"
PUBLISHa = "publish --allow-dirty"

# CLEAN PACKAGE
Cp = "clean --package"
Crp = "clean --release --package"

# DOC
d = "doc --no-deps"
do = "doc --no-deps --open"
dp = "doc --no-deps --document-private-items"
dpo = "doc --no-deps --open --document-private-items"

# TREE
tr = "tree --no-dedupe"
trf = "tr --format {p}:{f}" # with feature list
trr = "tr --format {p}:{r}" # with repository url

#/ cargo subcommands: /#
# ------------------------------------------------------------------------------

# $ cargo install -f cargo-show-asm
# https://crates.io/crates/cargo-show-asm
# https://github.com/pacak/cargo-show-asm/blob/master/Changelog.md
#
# NOTE:
# - Has to be run from the root of the crate.
# - Functions need not to be inlined. Defaults to release mode.
# - Needs to have installed rust sources and desired targets. E.g.:
# ```sh
# rustup component add rust-src
# rustup target add riscv64imac-unknown-none-elf
# ```
A = "asm --simplify -p devela"
Ar = "asm --simplify --rust -p devela" # print interleaved rust code
# std targets:
A_and_arm64    = "A  --target aarch64-linux-android"          # android
Ar_and_arm64   = "Ar --target aarch64-linux-android"
A_and_pc64     = "A  --target x86_64-linux-android"
Ar_and_pc64    = "Ar --target x86_64-linux-android"
A_lin_pc32     = "A  --target i686-unknown-linux-gnu"         # linux
Ar_lin_pc32    = "Ar --target i686-unknown-linux-gnu"
A_lin_pc64     = "A  --target x86_64-unknown-linux-gnu"
Ar_lin_pc64    = "Ar --target x86_64-unknown-linux-gnu"
A_lin_arm64    = "A  --target aarch64-unknown-linux-gnu"
Ar_lin_arm64   = "Ar --target aarch64-unknown-linux-gnu"
A_lin_riscv64  = "A  --target riscv64gc-unknown-linux-gnu"
Ar_lin_riscv64 = "Ar --target riscv64gc-unknown-linux-gnu"
A_mac64        = "A  --target x86_64-apple-darwin"            # apple
Ar_mac64       = "Ar --target x86_64-apple-darwin"
A_win64        = "A  --target x86_64-pc-windows-gnu"          # windows
Ar_win64       = "Ar --target x86_64-pc-windows-gnu"
# no_std targets:
A_pc32         = "A  --target i686-unknown-uefi"
Ar_pc32        = "Ar --target i686-unknown-uefi"
A_pc64         = "A  --target x86_64-unknown-none"
Ar_pc64        = "Ar --target x86_64-unknown-none"
A_arm32        = "A  --target thumbv7m-none-eabi"
Ar_arm32       = "Ar --target thumbv7m-none-eabi"
A_arm64        = "A  --target aarch64-unknown-none"
Ar_arm64       = "Ar --target aarch64-unknown-none"
A_riscv64      = "A  --target riscv64imac-unknown-none-elf"
Ar_riscv64     = "Ar --target riscv64imac-unknown-none-elf"
A_wasi32       = "A  --target wasm32-wasip1"
Ar_wasi32      = "Ar --target wasm32-wasip1"
A_wasm32       = "A  --target wasm32-unknown-unknown"
Ar_wasm32      = "Ar --target wasm32-unknown-unknown"

# $ cargo install -f cargo-expand
# https://crates.io/crates/cargo-expand
# https://github.com/dtolnay/cargo-expand/releases
#
# USAGE EXAMPLE:
# $ cargo Elt -F dep_const_str text::str::r#macro::tests
E = "expand"
Eb = "expand --bin"
Ee = "expand --example"
El = "expand --lib"
Elt = "expand --lib --tests"

# $ cargo install -f cargo-llvm-lines
# https://crates.io/crates/cargo-llvm-lines
# https://github.com/dtolnay/cargo-llvm-lines/releases
#
# USAGE EXAMPLE:
# $ cargo Lo --lib --filter data
L = "llvm-lines --profile dev"
Lo = "llvm-lines --profile dev-lto"
Lr = "llvm-lines --profile release"
Lro = "llvm-lines --profile release-lto"
# https://doc.rust-lang.org/stable/rustc/codegen-options/index.html#symbol-mangling-version
L0 = "llvm-lines --profile dev -- -Csymbol-mangling-version=v0"

# $ cargo install -f cargo-supply-chain
# https://crates.io/crates/cargo-supply-chain
# https://github.com/rust-secure-code/cargo-supply-chain/commits/master/
#
# NOTE:
# - lists all crates in the supply chain, not just in the dependency tree.
# - run Su first, to avoid re-downloading each time for other operations.
S = "supply-chain"
Sc = "S crates"
Scd = "S crates --features dep_all"
Sp = "S publishers"
Su = "S update --cache-max-age 1w"
