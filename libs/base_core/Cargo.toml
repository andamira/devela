[package]
name = "devela_base_core"
description = "base shared functionality for devela"
rust-version.workspace = true
edition.workspace = true
version.workspace = true
documentation.workspace = true
authors.workspace = true
license.workspace = true
repository = "https://github.com/andamira/devela/tree/main/libs/base_core"
include = [
	# configuration:
	"/Cargo.toml", "/config/*",
	# source code & documentation:
	"/src/**/*.rs", "/src/**/*.md",
	"/build/**/*",
	"/LICENSE*",
]
categories = ["rust-patterns", "development-tools"]
keywords = ["dev", "extension"]
build = "build/mod.rs"
autoexamples = false
publish = true
metadata.docs.rs = { features = ["_docs", "__publish"], no-default-features = true }

[features]

#* Development features *#
__dbg = []
__publish = []

#* Safety features *#
base_safe = [] # activates safe enforcement of thematic safe_* features
safest = ["safe", "base_safe"] # for completion
safe = [
	"devela_base_macros/safe", "safe_build",
	"safe_code", "safe_data", "safe_game", "safe_lang", "safe_media", "safe_num",
	"safe_phys", "safe_sys", "safe_text", "safe_ui", "safe_work",
]
	safe_build = []
	safe_code = []
	safe_data = []
	safe_game = []
	safe_lang = []
	safe_media = []
	safe_num = []
	safe_phys = []
	safe_sys = ["safe_io", "safe_mem"]
		safe_io = []
		safe_mem = []
	safe_text = []
	safe_ui = []
	safe_work = []

unsafe = [
	"devela_base_macros/unsafe",
	"unsafe_array", "unsafe_ffi", "unsafe_hint", "unsafe_layout",
	"unsafe_niche", "unsafe_ptr", "unsafe_slice", "unsafe_str",
	"unsafe_sync", "unsafe_syscall", "unsafe_thread",
]
	unsafe_array   = []
	unsafe_ffi     = []
	unsafe_hint    = []
	unsafe_layout  = []
	unsafe_niche   = []
	unsafe_ptr     = []
	unsafe_slice   = []
	unsafe_str     = []
	unsafe_sync    = []
	unsafe_syscall = []
	unsafe_thread  = []

#* Capability features *#
_docs = []

#* Dependency features (optional external dependencies) *#
# ------------------------------------------------------------------------------
# They are associated to optional dependencies and groups of modules.
# Enabling any of these will set the `dep··` reflection flag.
#
# Names are prefixed with `dep_`, and use underscores in place of dashes.

# In sync with ./config/dep_all & ./src/_dep.rs
dep_all = [ # enables all 1 optional dependencies:
	"dep_simdutf8",
]

# individual dependencies features
dep_memchr = ["dep:memchr"] # "winnow?/simd"                                      # text:str
dep_simdutf8 = ["dep:simdutf8"]                                                   # text::str


[dependencies] # 3 (2 required, 1 optional)
devela_base_macros = { workspace = true }

#* required external dependencies *#

[dependencies.paste_crate] # https://crates.io/crates/paste
version = "1.0.15" # ✗ https://github.com/dtolnay/paste/commits/master/
package = "paste" # safe, ARCHIVED
# alternative: https://crates.io/crates/pastey

#* optional external dependencies *#

[dependencies.memchr] # https://crates.io/crates/memchr
version = "2.7" # ✗ https://github.com/BurntSushi/memchr/commits/master/
optional = true # unsafe
default-features = false # 9 https://docs.rs/crate/memchr/latest/features

[dependencies.simdutf8] # https://crates.io/crates/simdutf8 (2024-09-22)
version = "0.1" # ✓ https://github.com/rusticstuff/simdutf8/blob/main/CHANGELOG.md
optional = true # unsafe
default-features = false # 6 https://docs.rs/crate/simdutf8/latest/features
# features = [] # https://github.com/rusticstuff/simdutf8/blob/main/Cargo.toml
# WAIT: [const_methods](https://github.com/rusticstuff/simdutf8/pull/111) text::str::namespace

[badges]
maintenance.status = "experimental"

[lints]
workspace = true
